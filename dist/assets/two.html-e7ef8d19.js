import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c,a as s,b as n,d as t,w as e,e as p}from"./app-82a511c8.js";const r="/assets/images/selectionSort.gif",u="/assets/images/冒泡排序.gif",d="/assets/images/堆排序.png",m="/assets/images/插入排序.gif",k="/assets/images/链表排序流程图.png",v={},h={id:"_1-各种排序的结论",tabindex:"-1"},g=s("a",{class:"header-anchor",href:"#_1-各种排序的结论","aria-hidden":"true"},"#",-1),b=s("table",null,[s("thead",null,[s("tr",null,[s("th",{style:{"text-align":"center"}},"名称"),s("th",{style:{"text-align":"center"}},"时间常数"),s("th",{style:{"text-align":"center"}},"空间常数"),s("th",{style:{"text-align":"center"}},"稳定性"),s("th",{style:{"text-align":"center"}},"描述"),s("th",{style:{"text-align":"center"}},"需要注意的问题"),s("th",{style:{"text-align":"center"}},"具体时间数字")])]),s("tbody",null,[s("tr",null,[s("td",{style:{"text-align":"center"}},[s("a",{href:"#_2-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F"},"选择排序")]),s("td",{style:{"text-align":"center"}},[n("O("),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mi",null,"N"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"N^{2}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])])]),n(")")]),s("td",{style:{"text-align":"center"}},"O(1)"),s("td",{style:{"text-align":"center"}},[s("a",{href:"#%E7%A8%B3%E5%AE%9A%E6%80%A7"},"不稳")]),s("td",{style:{"text-align":"center"}},[s("a",{href:"#%E6%8F%8F%E8%BF%B0"},"不常用")]),s("td",{style:{"text-align":"center"}},[s("a",{href:"#%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98"},"内循环不要越界")]),s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mfrac",null,[s("msup",null,[s("mi",null,"N"),s("mn",null,"2")]),s("mn",null,"2")]),s("mo",null,"+"),s("mfrac",null,[s("mn",null,"3"),s("mn",null,"2")]),s("mi",null,"N")]),s("annotation",{encoding:"application/x-tex"},"\\frac{N^{2} }{2} + \\frac{3}{2} N")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.3629em","vertical-align":"-0.345em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.0179em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8913em"}},[s("span",{style:{top:"-2.931em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.1901em","vertical-align":"-0.345em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"3")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])])])]),s("tr",null,[s("td",{style:{"text-align":"center"}},[s("a",{href:"#_3-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F"},"冒泡排序")]),s("td",{style:{"text-align":"center"}},[n("O("),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mi",null,"N"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"N^{2}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])])]),n(")")]),s("td",{style:{"text-align":"center"}},"O(1)"),s("td",{style:{"text-align":"center"}},[s("a",{href:"#%E7%A8%B3%E5%AE%9A%E6%80%A7"},"稳定")]),s("td",{style:{"text-align":"center"}},[s("a",{href:"#%E6%8F%8F%E8%BF%B0-1"},"不常用")]),s("td",{style:{"text-align":"center"}},"无"),s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mfrac",null,[s("mn",null,"3"),s("mn",null,"4")]),s("msup",null,[s("mi",null,"N"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"\\frac{3}{4}N^{2}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.1901em","vertical-align":"-0.345em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"4")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"3")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])])])])]),s("tr",null,[s("td",{style:{"text-align":"center"}},[s("a",{href:"#_4-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F"},"插入排序")]),s("td",{style:{"text-align":"center"}},[n("O("),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mi",null,"N"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"N^{2}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])])]),n(")")]),s("td",{style:{"text-align":"center"}},"O(1)"),s("td",{style:{"text-align":"center"}},[s("a",{href:"#%E7%A8%B3%E5%AE%9A%E6%80%A7"},"稳定")]),s("td",{style:{"text-align":"center"}},[s("a",{href:"#%E6%8F%8F%E8%BF%B0-2"},"不常用")]),s("td",{style:{"text-align":"center"}},"数组不要越界"),s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mfrac",null,[s("msup",null,[s("mi",null,"N"),s("mn",null,"2")]),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"\\frac{N^{2} }{2}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.3629em","vertical-align":"-0.345em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.0179em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8913em"}},[s("span",{style:{top:"-2.931em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])])])])])],-1),y={id:"_2-选择排序",tabindex:"-1"},x=s("a",{class:"header-anchor",href:"#_2-选择排序","aria-hidden":"true"},"#",-1),f=p('<ul><li>.<strong>思维模式：</strong></li></ul><p><strong>第一个循环是我看中的位置，第二个循环是我要找的人。</strong></p><p>如下是大名鼎鼎的菜鸟教程来的动图：</p><div style="text-align:center;"><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>最后面的黄色条状图是第一次循环，也就是我看中的位置，</p><p>绿色是我在寻找的过程，红色是在过程中我找到的适合的人。</p><ul><li>.<strong>代码</strong>：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
	名称：交换函数 
	原理：异或具有的交换律和结合律的性质
	输入：数组地址，和交换数字的两个下标 
*/</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> x <span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
	arr <span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
	arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span>  temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
	名称：输出数组
	原理：for循环遍历
	输入：数组地址 ， 数组长度 
*/</span>
<span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;len = %d\\r\\n&quot;</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;arr[%d] = %d\\r\\n&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
 <span class="token punctuation">}</span> 
<span class="token comment">/*
	名称：选择排序 
	原理：循环数组，找最小的和当前位置的数进行交换 
	输入：数组地址 ，数组长度 
*/</span>
<span class="token keyword">void</span> <span class="token function">selectsort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>	
	<span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>len<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">//边界是程序员最重要的思想。</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment">//第一次循环 范围是：i — N-1  </span>
	<span class="token punctuation">{</span>
		<span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment">// 把坐在位置上的人也带上寻找的过程</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			minIndex <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">?</span> j <span class="token operator">:</span> minIndex<span class="token punctuation">;</span>  <span class="token comment">//找到最小值。</span>
		 <span class="token punctuation">}</span>
		 <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>minIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 寻找到最小值或者说寻找这个过程结束后，</span>
                           <span class="token comment">//才进行交换。</span>
	<span class="token punctuation">}</span>
 <span class="token punctuation">}</span> 

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 
	<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">selectsort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h4 id="稳定性" tabindex="-1"><a class="header-anchor" href="#稳定性" aria-hidden="true">#</a> 稳定性</h4><p>不稳的原因是，比如我需要排列的数组是5，8，5，2，9。</p><p>标记两个5为5(1)，5(2)，</p><p>数组就会变成5(1)，8，5(2)，2，9。</p><p>根据我上面的代码逻辑，第一个外循环结束后就会变成</p><p>2，8，5(2)，5(1)，4。</p><p>相同的数，和原来的顺序不一样了，这就叫做稳定性。<a href="">稳定性的意义跳转</a></p></li><li><h4 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h4></li></ul><p>不常用的原因是有比他更好的存在，</p>`,10),w=s("p",null,[n("时间复杂度来说，稳定的O("),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mi",null,"N"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"N^{2}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])])]),n(")是最慢的算法，")],-1),_=p(`<p>常数操作的时间也没有插入来的快。</p><p>倒是有一个应用场景非常符合它，</p><p>就是<strong>在一个数组中选出前几个</strong>的场景。</p><ul><li><h4 id="需要注意的问题" tabindex="-1"><a class="header-anchor" href="#需要注意的问题" aria-hidden="true">#</a> 需要注意的问题</h4></li></ul><p>截取最核心的代码过来：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment">//第一次循环 范围是：i — N-1  </span>
	<span class="token punctuation">{</span>
		<span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment">// 把坐在位置上的人也带上寻找的过程</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			minIndex <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">?</span> j <span class="token operator">:</span> minIndex<span class="token punctuation">;</span>  <span class="token comment">//找到最小值。</span>
		 <span class="token punctuation">}</span>
		 <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>minIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 寻找到最小值或者说寻找这个过程结束后，才进行交换。</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个循环中我把范围定义为：i ~ N-1，</p><p>如果我定义为：i ~ N，在第二个循环的最后面j就会变成N+1。</p><p>内存警告。你访问了arr[N+1]的内容，但是你却只定义了arr[N+1]。</p><p>如果你觉得这句话很奇怪，说明你不知道定义arr[N+1]只能够访问arr[N]的内容。<strong>敲重点</strong></p>`,10),z={id:"_3-冒泡排序",tabindex:"-1"},E=s("a",{class:"header-anchor",href:"#_3-冒泡排序","aria-hidden":"true"},"#",-1),N=p('<ul><li>.<strong>思维模式：</strong></li></ul><div style="text-align:center;"><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>找到最后面位置应该排序的数字。</strong></p><p>第一个循环是从最后面开始，数字是需要排在的地方。</p><p>第二个循环是从最前面开始，轮到最后面不需要排序的数字。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">bubblesort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>	
	<span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>len<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token comment">//i —N-1 </span>
	<span class="token punctuation">{</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>i <span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		 <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
 <span class="token punctuation">}</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="稳定性-1" tabindex="-1"><a class="header-anchor" href="#稳定性-1" aria-hidden="true">#</a> 稳定性</h4><p>稳定，因为数字是交换的，所以当数字的大小比对不适合的时候，前面和后面相同的数是不会交换的。</p><ul><li><h4 id="描述-1" tabindex="-1"><a class="header-anchor" href="#描述-1" aria-hidden="true">#</a> 描述</h4></li></ul><p>没有插入排序高效。</p>`,11),j={id:"_4-插入排序",tabindex:"-1"},A=s("a",{class:"header-anchor",href:"#_4-插入排序","aria-hidden":"true"},"#",-1),M=p('<ul><li>.<strong>思维模式：</strong></li></ul><div style="text-align:center;"><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>第一个循环是找需要排位的地方</p><p>第二个循环是从需要排位的地方一个一个的交换到第一个，找到适合的部位</p><p><strong>代码：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">Insertsort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>	
	<span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>len<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment">//1 —N </span>
	<span class="token punctuation">{</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//这个写法也非常的精简了 </span>
	<span class="token punctuation">}</span>
 <span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="稳定性-2" tabindex="-1"><a class="header-anchor" href="#稳定性-2" aria-hidden="true">#</a> 稳定性</h4><p>稳定，因为数字是交换的，所以当数字的大小比对不适合的时候，前面和后面相同的数是不会交换的。</p><ul><li><h4 id="描述-2" tabindex="-1"><a class="header-anchor" href="#描述-2" aria-hidden="true">#</a> 描述</h4></li></ul><p>高效</p><ul><li><h4 id="需要注意的问题-1" tabindex="-1"><a class="header-anchor" href="#需要注意的问题-1" aria-hidden="true">#</a> 需要注意的问题</h4></li></ul><p>对比的时候注意数组的边界，不要越界。</p>`,12),B={id:"_5-插入排序-链表",tabindex:"-1"},F=s("a",{class:"header-anchor",href:"#_5-插入排序-链表","aria-hidden":"true"},"#",-1),L=p('<ul><li>.<strong>思维模式：</strong></li></ul><div style="text-align:center;"><figure><img src="'+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p><strong>代码：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>ist <span class="token function">InsertSort</span><span class="token punctuation">(</span>list begin<span class="token punctuation">,</span>list end<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	list aux <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>listpoint<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	aux<span class="token operator">-&gt;</span>next <span class="token operator">=</span> begin<span class="token punctuation">;</span>
	aux<span class="token operator">-&gt;</span>x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	list pre <span class="token operator">=</span> begin<span class="token punctuation">;</span>list cur <span class="token operator">=</span> begin<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
	
	<span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>x<span class="token operator">&lt;</span>pre<span class="token operator">-&gt;</span>x<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">//删除节点</span>
			pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
			
			<span class="token comment">//寻找插入的位置</span>
			list l1 <span class="token operator">=</span> aux<span class="token punctuation">;</span>list l2 <span class="token operator">=</span> aux<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
			
			<span class="token keyword">while</span><span class="token punctuation">(</span>l2<span class="token operator">-&gt;</span>x <span class="token operator">&lt;=</span> cur<span class="token operator">-&gt;</span>x<span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				l1 <span class="token operator">=</span> l1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> l2 <span class="token operator">=</span> l2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			
			l1<span class="token operator">-&gt;</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span> cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>
			<span class="token comment">//回到原位</span>
			cur <span class="token operator">=</span> pre<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span><span class="token punctuation">{</span>
			pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
			cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> aux<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h4 id="描述-3" tabindex="-1"><a class="header-anchor" href="#描述-3" aria-hidden="true">#</a> 描述</h4></li><li><p>1.利用链表的特性，简单的删除结点，</p></li></ul><p>使用的方法是改变前面结点的后接结点，到被删除节点的后接结点</p><p>这样就可以做一个双头链表，使得被删除的节点的地址比较难以找到。</p><ul><li><ol start="2"><li>因为有一定的可能性是插入头的，</li></ol></li></ul><p>所以需要一个aux，来制作一个假头，来使真前面比较容易的插入</p><ul><li><ol start="3"><li>真头和假头都是最好都保有案底，这样比较容易找到控制链表</li></ol></li><li><ol start="4"><li>寻找插入的位置需要新建立两个指针，在其中插入。</li></ol></li><li><h4 id="需要注意的问题-2" tabindex="-1"><a class="header-anchor" href="#需要注意的问题-2" aria-hidden="true">#</a> 需要注意的问题</h4></li><li><ol><li>到底有多少个指针</li></ol></li></ul><p>为了判断这个数以前的排序是否是顺序，需要两个指针前后比对，---- 2个</p><p>为了列表的头容易插入，制作一个假头。 --- 1个</p><p>为了能够方便插入，需要两个最容易变更的指针，从假头和真头开始移动。 --- 2个</p><p>一共就是五个，指针。</p>`,14);function I(O,q){const a=i("font");return o(),c("div",null,[s("h2",h,[g,n(),t(a,{color:"red"},{default:e(()=>[n("#")]),_:1}),n("1.各种排序的结论")]),b,s("h2",y,[x,n(),t(a,{color:"red"},{default:e(()=>[n("#")]),_:1}),n("2.选择排序")]),f,w,_,s("h2",z,[E,n(),t(a,{color:"red"},{default:e(()=>[n("#")]),_:1}),n("3.冒泡排序")]),N,s("h2",j,[A,n(),t(a,{color:"red"},{default:e(()=>[n("#")]),_:1}),n("4.插入排序")]),M,s("h2",B,[F,n(),t(a,{color:"red"},{default:e(()=>[n("#")]),_:1}),n("5.插入排序-链表")]),L])}const S=l(v,[["render",I],["__file","two.html.vue"]]);export{S as default};
