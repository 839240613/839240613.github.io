import{_ as o}from"./循环模型-ff88f5b7.js";import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as i,c as u,a as n,b as s,d as t,w as e,e as p}from"./app-82a511c8.js";const r="/assets/images/堆排序.gif",k="/assets/images/堆排序.svg",d="/assets/images/计数排序.svg",m="/assets/images/基数排序.svg",v={},b={id:"_1-各种排序的结论",tabindex:"-1"},h=n("a",{class:"header-anchor",href:"#_1-各种排序的结论","aria-hidden":"true"},"#",-1),g=n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"名称"),n("th",{style:{"text-align":"center"}},"时间常数"),n("th",{style:{"text-align":"center"}},"空间常数"),n("th",{style:{"text-align":"center"}},"稳定性"),n("th",{style:{"text-align":"center"}},"描述"),n("th",{style:{"text-align":"center"}},"需要注意的问题"),n("th",{style:{"text-align":"center"}},"具体时间数字")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"center"}},"堆排序"),n("td",{style:{"text-align":"center"}},[s("O("),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"N")]),n("annotation",{encoding:"application/x-tex"},"N")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])]),s(")")]),n("td",{style:{"text-align":"center"}},"O(1)"),n("td",{style:{"text-align":"center"}},[n("a",{href:"#%E7%A8%B3%E5%AE%9A%E6%80%A7"},"不稳")]),n("td",{style:{"text-align":"center"}},[n("a",{href:"#%E6%8F%8F%E8%BF%B0"},"不占格外空间下最好的算法")]),n("td",{style:{"text-align":"center"}},[n("a",{href:"#%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98"},"heapInsert和heapify的理解")]),n("td",{style:{"text-align":"center"}},"O(NlogN)")]),n("tr",null,[n("td",{style:{"text-align":"center"}},"计数排序"),n("td",{style:{"text-align":"center"}},[s("O("),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"N")]),n("annotation",{encoding:"application/x-tex"},"N")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])]),s(")")]),n("td",{style:{"text-align":"center"}},"O(N)"),n("td",{style:{"text-align":"center"}},[n("a",{href:"#%E7%A8%B3%E5%AE%9A%E6%80%A7-1"},"稳定")]),n("td",{style:{"text-align":"center"}},[n("a",{href:"#%E6%8F%8F%E8%BF%B0-1"},"在数据样本最大值不大的情况下")]),n("td",{style:{"text-align":"center"}},[n("a",{href:"#%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98-1"},"数据样本最大值不能太大")]),n("td",{style:{"text-align":"center"}},"固定O(N)")]),n("tr",null,[n("td",{style:{"text-align":"center"}},"基数排序"),n("td",{style:{"text-align":"center"}},[s("O("),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"N")]),n("annotation",{encoding:"application/x-tex"},"N")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])]),s(")")]),n("td",{style:{"text-align":"center"}},"O(N)"),n("td",{style:{"text-align":"center"}},[n("a",{href:"#%E7%A8%B3%E5%AE%9A%E6%80%A7-2"},"稳定")]),n("td",{style:{"text-align":"center"}},[n("a",{href:"#%E6%8F%8F%E8%BF%B0-2"},"针对计数排序缺点的改进")]),n("td",{style:{"text-align":"center"}},[n("a",{href:"#%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98-2"},"比计数排序复杂的多")]),n("td",{style:{"text-align":"center"}},"固定O(N)")])])],-1),x={id:"_2-堆排序",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#_2-堆排序","aria-hidden":"true"},"#",-1),f=p('<ul><li>.<strong>思维模式：</strong></li></ul><p><strong>放入大小根堆这个结构就好。</strong> 又叫做优先级队列。通过数组假装一个堆。</p><div style="text-align:center;"><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p><strong>流程图如下：</strong></p><div style="text-align:center;"><figure><img src="'+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><ul><li>.<strong>代码</strong>：</li></ul><p>heapInsert：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// Make the arr simulateing a heap strcture. </span>
<span class="token keyword">void</span> <span class="token function">heapInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>heapify：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//Maintain the heap structure form one position in the tree down.</span>
<span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> heapsize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> heapsize<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">int</span> min <span class="token operator">=</span> left<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>heapsize <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> left<span class="token operator">:</span> left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&gt;</span>min<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>index<span class="token punctuation">,</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
			left <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>min<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			index <span class="token operator">=</span> min<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>		
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h4 id="稳定性" tabindex="-1"><a class="header-anchor" href="#稳定性" aria-hidden="true">#</a> 稳定性</h4></li></ul><p>不稳，右子树有左子树相同的数的时候，有可能交换上一级，导致不稳定。</p><ul><li><h4 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h4></li></ul><p>过程是数组一个一个放进所谓的堆里，交换弹出。。所以小根堆排出来的是从大到小的排序。</p><ul><li><h4 id="需要注意的问题" tabindex="-1"><a class="header-anchor" href="#需要注意的问题" aria-hidden="true">#</a> 需要注意的问题</h4></li><li><ol><li>优先级队列在中的堆结构，顺序排列和堆结构的层序遍历顺序必须一致。 堆只是做思维辅助作用的，真正的排序其实是数组。</li></ol></li></ul>`,15),w={id:"_3-计数排序",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_3-计数排序","aria-hidden":"true"},"#",-1),E=p('<ul><li>.<strong>思维模式：</strong> 在样本量最大值不大的情况下可以用把样本值变成一个数组，然后用一个个桶装起来， 桶又叫做词频表，</li></ul><p><strong>流程图如下：</strong></p><div style="text-align:center;"><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><ul><li>.<strong>代码</strong>：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">Counting_Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> Length <span class="token operator">=</span> len<span class="token punctuation">;</span>
	<span class="token keyword">int</span> Length1  <span class="token operator">=</span> len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token comment">//find the max of the arr</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>len<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token operator">&gt;</span>max<span class="token punctuation">)</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token comment">//creat a bucket </span>
	<span class="token keyword">int</span> bucket<span class="token punctuation">[</span>max<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>bucket<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>bucket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//barrelling</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>Length<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>Length<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> 
	<span class="token punctuation">}</span>
	
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token comment">//Pour out</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>Length1<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>Length1<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> Length1<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> 
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h4 id="稳定性-1" tabindex="-1"><a class="header-anchor" href="#稳定性-1" aria-hidden="true">#</a> 稳定性</h4></li></ul><p>稳定，从左到右的相同的数是按顺序的先后进入的，所以稳定。</p><ul><li><h4 id="描述-1" tabindex="-1"><a class="header-anchor" href="#描述-1" aria-hidden="true">#</a> 描述</h4></li></ul><p>样本量不大的情况下，简单又快捷的排序方式。</p><ul><li><h4 id="需要注意的问题-1" tabindex="-1"><a class="header-anchor" href="#需要注意的问题-1" aria-hidden="true">#</a> 需要注意的问题</h4></li><li>1.桶不是排好序的东西，是词频表，记录的是index而不是内容。</li><li>2.桶的大小是最大值+1。所以创建的时候，是max+1.倒回去的时候也是max+1。</li></ul>`,10),A={id:"_4-基数排序",tabindex:"-1"},N=n("a",{class:"header-anchor",href:"#_4-基数排序","aria-hidden":"true"},"#",-1),j=p('<ul><li>.<strong>思维模式：</strong></li></ul><div style="text-align:center;"><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p><strong>流程图如下：</strong></p><ul><li>.<strong>代码</strong>：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">radix_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">// the boundary</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
	
	<span class="token comment">//find the max of the arr for set the bucket</span>
	<span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>max<span class="token punctuation">)</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token comment">//set radix_bucket</span>
	<span class="token keyword">int</span> radix_bucket<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>radix_bucket<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>radix_bucket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//get the radix of the max</span>
	<span class="token keyword">int</span> radix_max <span class="token operator">=</span> <span class="token function">get_Maxradix</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> help<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>
	
	<span class="token comment">//Loop through the number of bits</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>radix_max<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">memset</span><span class="token punctuation">(</span>radix_bucket<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>radix_bucket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">memset</span><span class="token punctuation">(</span>help<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>help<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">//get the bitradix of the number.</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">int</span> radix <span class="token operator">=</span> <span class="token function">get_radix</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
			<span class="token comment">// barreling</span>
			radix_bucket<span class="token punctuation">[</span>radix<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		
		<span class="token comment">//update the bucket for set new arr.</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			radix_bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span>  radix_bucket<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		
		<span class="token comment">//Rearrangement array.</span>
		
		
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token comment">//1. get the bit of the number.</span>
			<span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">get_radix</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//2. find the corresponding parameter in the radix_bucket and set the help arr.</span>
			help<span class="token punctuation">[</span><span class="token operator">--</span>radix_bucket<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//3. pour it to the help.</span>
			
			<span class="token punctuation">}</span>
			<span class="token comment">//4. pour it back.</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> help<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h4 id="稳定性-2" tabindex="-1"><a class="header-anchor" href="#稳定性-2" aria-hidden="true">#</a> 稳定性</h4></li></ul><p>稳定，同计数排序一致，稳定。</p><ul><li><h4 id="描述-2" tabindex="-1"><a class="header-anchor" href="#描述-2" aria-hidden="true">#</a> 描述</h4></li></ul><p>解决计数排序中，因为最大值很大而使桶数组很大的问题。 不过代价的花费一点点的时间。比较划算。</p><ul><li><h4 id="需要注意的问题-2" tabindex="-1"><a class="header-anchor" href="#需要注意的问题-2" aria-hidden="true">#</a> 需要注意的问题</h4></li><li>1.<strong>循环内使用的数组，循环回来要查看是否需要清空。</strong></li><li><ol start="2"><li>运动的先后有着截然不同的差别。判断条件先做，执行后做，执行有可能会缺少最后一次。</li></ol></li></ul><p><strong>用一个这样的模型：</strong></p><div style="text-align:center;"><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p><strong>代码：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">get_Maxradix</span><span class="token punctuation">(</span><span class="token keyword">int</span> max<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> radix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
	
	<span class="token keyword">while</span><span class="token punctuation">(</span>max <span class="token operator">=</span> max<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		radix<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">return</span> radix<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function B(L,M){const a=l("font");return i(),u("div",null,[n("h2",b,[h,s(),t(a,{color:"red"},{default:e(()=>[s("#")]),_:1}),s("1.各种排序的结论")]),g,n("h2",x,[y,s(),t(a,{color:"red"},{default:e(()=>[s("#")]),_:1}),s("2.堆排序")]),f,n("h2",w,[_,s(),t(a,{color:"red"},{default:e(()=>[s("#")]),_:1}),s("3.计数排序")]),E,n("h2",A,[N,s(),t(a,{color:"red"},{default:e(()=>[s("#")]),_:1}),s("4.基数排序")]),j])}const C=c(v,[["render",B],["__file","four.html.vue"]]);export{C as default};
