import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as s,c,a as i,b as e,d as a,e as n}from"./app-e4bb05b4.js";const r="/assets/images/QT的UI界面.jpg",p="/assets/images/文本的一些控制.png",g="/assets/images/标签变色.png",d="/assets/images/action界面.png",u="/assets/images/菜单栏的控制.png",f="/assets/images/connect的两种写法.png",_="/assets/images/Set_Icon.png",m={},h=n('<p>GUI： 全程Graphical User Interface，中文名为图形用户界面。</p><div style="text-align:center;"><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><ul><li>伙伴的作用</li></ul><p>在文本内容上弄个括号，括号里面加一个&amp;加上字母，相关的就能够用alt+字母即可。</p><p>标签和文本框相互为伙伴，alt+N指向文本框。</p><ul><li>TabOrder的作用 程序开启之后，按Tab切换的焦点不同。</li></ul><p>这两个东西应该是为了适应所有的系统和程序写的。</p><h3 id="信号与槽" tabindex="-1"><a class="header-anchor" href="#信号与槽" aria-hidden="true">#</a> 信号与槽</h3><p>connect函数是Object的静态函数，静态函数里面只能用静态变量，静态函数可以通过 类名::静态函数名() 的方式调用。</p><p>当信号和槽具有参数的时候，只需要传递类型，不需要传递名称。</p><ul><li>文本斜体，下划线，粗体是这样的。</li></ul><div style="text-align:center;"><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>在ui_窗口.h的文件中connectSlotByName将页面上的所有组件，将信号和槽关联起来。是右键然后弄出来的槽函数。</p><p>如果是直接的弄在下方或者槽和信号模式添加的，就是在ui_.h的文件直接connect。</p><ul><li>QT的标签文本变色</li></ul><div style="text-align:center;"><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><ul><li><p>主要是windowsText把你卡住了，虽然最好还是模块和库都使用。</p></li><li><p>关于QT的构建函数</p></li></ul><p>父类和子类的关系是，现有老爸再有儿子。</p>',18),x={href:"https://www.cnblogs.com/shmilxu/p/4849097.html",target:"_blank",rel:"noopener noreferrer"},b=n('<p>虚继承就是菱形继承，为了让菱形顶头的类不被重复编译。</p><p>而且这个初始化列表还能够混合构建。六</p><ul><li><p>QAbstractButton抽象类的setchecked()函数，是设置radioBtn是否是被选中。</p></li><li><p>资源室通过.在目录中的.qrc文件查找的，这个文件是XML文件，里面的文件是XML格式的文件，在QT中项目的路径和资源文件的路径是不一样的。通过的路径再引导向了实际的路径。</p></li><li><p>ACtion的编辑</p></li></ul><div style="text-align:center;"><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>ToolTip是当鼠标停留在那里的时候的出现的文字。</p><p>hortcut就是快捷键。</p><ul><li>action的东西其实就是在框框里面输入之后按回车就好</li></ul><p>然后相关的显示需要找到mainwiondow的东西加入。</p><div style="text-align:center;"><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><ul><li><p>菜单栏的UI设计，菜单栏，工具栏，状态栏。</p></li><li><p>connect的写法</p></li></ul><div style="text-align:center;"><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>宏的方式比较安全，比较能够一定让系统找到。</p><ul><li>总的写法</li></ul><p>先定义组件，再整理connect。</p><ul><li>编译完成后出出现的窗口图表</li></ul><div style="text-align:center;"><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><h4 id="关于qt一共设置了多少个窗口" tabindex="-1"><a class="header-anchor" href="#关于qt一共设置了多少个窗口" aria-hidden="true">#</a> 关于QT一共设置了多少个窗口</h4>',17),v={href:"https://blog.csdn.net/m0_58699417/article/details/128020662",target:"_blank",rel:"noopener noreferrer"};function y(T,w){const t=o("ExternalLinkIcon");return s(),c("div",null,[h,i("p",null,[i("a",x,[e("一个不错的网站"),a(t)])]),b,i("p",null,[i("a",v,[e("各个窗口的分类"),a(t)])])])}const I=l(m,[["render",y],["__file","two.html.vue"]]);export{I as default};
