import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o,c as p,a as e,b as a,d as n,e as i}from"./app-e4bb05b4.js";const d="/assets/images/操作系统概述.jpg",c="/assets/images/Linux和Windows对比.jpg",g="/assets/images/GNU和Linux的关系.jpg",l="/assets/images/Linux和各种的对比.jpg",h="/assets/images/ARM架构名称.jpg",u="/assets/images/芯片框架图.jpg",f="/assets/images/嵌入式的软件层.jpg",m="/assets/images/嵌入式Linux的东西都是不统一的.jpg",x="/assets/images/嵌入式Linux和发行版Linux的区别.jpg",_="/assets/images/指令与架构与编译环境.jpg",b="/assets/images/电脑编写程序生成嵌入式系统.jpg",v="/assets/images/相关的工具编译器.jpg",y={},L=i('<h3 id="两个系统的相比较" tabindex="-1"><a class="header-anchor" href="#两个系统的相比较" aria-hidden="true">#</a> 两个系统的相比较</h3><p>使用Linux的时候就会通过这些层一层一层传递</p><div style="text-align:center;"><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>Windows和Linux相比对</p><div style="text-align:center;"><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div>',5),z={href:"https://zhuanlan.zhihu.com/p/601968270?utm_id=0",target:"_blank",rel:"noopener noreferrer"},S=i('<p>其中JPAG全称是：Joint Test Action Group</p><p>一种国际标准测试协议，用于调试FLash，由于功能强大可以直接把整个FLASH取出来，所以一般成品之后没有借口。</p><h3 id="linux发行板" tabindex="-1"><a class="header-anchor" href="#linux发行板" aria-hidden="true">#</a> Linux发行板</h3><p>为客户预先集成好的Linux操作系统及各种应用软件，直接安装之后，只需要小幅度的设置就可以使用，通常以软件包管理系统来进行应用软件的管理。</p><h4 id="debin系列" tabindex="-1"><a class="header-anchor" href="#debin系列" aria-hidden="true">#</a> Debin系列：</h4><p>一种强调自由软件的发行版，支持多种硬件平台。使用dpkg及其前端作为软件包管理器。</p><p>Ubuntu</p><h4 id="red-hat系列" tabindex="-1"><a class="header-anchor" href="#red-hat系列" aria-hidden="true">#</a> Red Hat系列</h4><p>CentOS。主要支持X86处理器架构。</p><h3 id="gun" tabindex="-1"><a class="header-anchor" href="#gun" aria-hidden="true">#</a> GUN</h3><div style="text-align:center;"><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>这幅图可以很好的描述之前我很多的疑惑。</p><div style="text-align:center;"><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><h3 id="指令集" tabindex="-1"><a class="header-anchor" href="#指令集" aria-hidden="true">#</a> 指令集</h3><p>市面上主要有两种指令集：</p><h4 id="复杂指令集计算机-complex-instruction-set-computer" tabindex="-1"><a class="header-anchor" href="#复杂指令集计算机-complex-instruction-set-computer" aria-hidden="true">#</a> 复杂指令集计算机（Complex Instruction Set Computer）</h4><p>缩写：CISC。是一种微处理器指令集架构。每个指令都可执行若干低端操作，</p><p>从储存器读取，存储，和计算操作，全部集中于单一指令中。复杂指令集的指令数目多而复杂，每条指令字长并不相等，电脑需要加以判读，</p><p>因此需要付出性能的代价。</p><h4 id="精简指令集计算机-reduced-instruction-set-computer" tabindex="-1"><a class="header-anchor" href="#精简指令集计算机-reduced-instruction-set-computer" aria-hidden="true">#</a> 精简指令集计算机（Reduced Instruction Set Computer）</h4><p>缩写：RISC。是一种微处理器指令集架构。指令集简单，指令字长相等，是计算机中央处理器的一种设计模式，堆指令数目和寻址方式都做出精简，</p><p>使其更容易实现，指令并行执行程度更好。</p><p>以下是芯片相关的运行动作</p>',23),j={href:"http://visual6502.org/sim/varm/armgl.html",target:"_blank",rel:"noopener noreferrer"},I=i('<p>特别的ARM架构是一个RISC架构的处理器家族。一般来说ARMv7就是指令集的意思。</p><div style="text-align:center;"><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>M系列：控制单元系列</p><p>R系列：实时应用系列</p><p>A系列：应用系列，跑应用的高性能系列。在上面运行嵌入式Linux系统。</p><h3 id="芯片框架图" tabindex="-1"><a class="header-anchor" href="#芯片框架图" aria-hidden="true">#</a> 芯片框架图</h3><div style="text-align:center;"><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>时钟下面的是NEON和SIMD</p>',8),M={href:"https://blog.51cto.com/u_15064627/4519496",target:"_blank",rel:"noopener noreferrer"},N=i('<p>SIMD（Single Instruction, Multiple Data）单指令多数据流，是一种并行计算的设计架构。</p><p>进行多媒体操作的时候，想要榨干CPU的性能，就多找几条类似的数据，进行并行处理。</p><p>NEON就是SIMD的进阶，SIMD是处理八位至十六位数据的，</p><p>而NEON就是处理六十四至一百二十八位数据的。</p><p>其中FPU就是浮点运算单元，MPU就是硬件保护机制。</p><h3 id="嵌入式的软件层" tabindex="-1"><a class="header-anchor" href="#嵌入式的软件层" aria-hidden="true">#</a> 嵌入式的软件层</h3><div style="text-align:center;"><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>嵌入式系统的相关东西都是不统一的。</p><div style="text-align:center;"><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>嵌入式系统和发行版的区别：</p><div style="text-align:center;"><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>到这里终于明白架构是什么了，</p><p>架构就是控制芯片的指令集，指令集设计整个芯片的硬件，</p><p>因为指令集不一样，因此，如果用不同的编译工具链，就会变成不同的编译代码</p><p>如果编译代码是X86架构的，在ARM架构的精简指令集就会看不懂。</p><div style="text-align:center;"><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>嵌入式的构建图：</p><div style="text-align:center;"><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>嵌入式Linux工具编译器</p><div style="text-align:center;"><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div>',20);function C(R,A){const t=s("ExternalLinkIcon");return o(),p("div",null,[L,e("p",null,[e("a",z,[a("Bootloader的相关说明"),n(t)])]),S,e("p",null,[e("a",j,[a("ARM内部硬件运行原理"),n(t)])]),I,e("p",null,[e("a",M,[a("加速结构"),n(t)])]),N])}const E=r(y,[["render",C],["__file","one.html.vue"]]);export{E as default};
