const e=JSON.parse('{"key":"v-eab7d9d4","path":"/bookList/QT/four.html","title":"容器","lang":"zh-CN","frontmatter":{"title":"容器","icon":"fab fa-markdown","order":4,"category":["QT"],"prev":"three.md","next":"five.md"},"headers":[{"level":3,"title":"顺序容器","slug":"顺序容器","link":"#顺序容器","children":[]},{"level":3,"title":"关联容器","slug":"关联容器","link":"#关联容器","children":[]},{"level":3,"title":"容器类的迭代","slug":"容器类的迭代","link":"#容器类的迭代","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":7.17,"words":2151},"filePathRelative":"bookList/QT/four.md","excerpt":"<h3> 顺序容器</h3>\\n<ul>\\n<li>1.QList</li>\\n</ul>\\n<p>以数组列表(array list)的形式实现的。在其前和后添加数据会变得非常的快速，基于索引的方式访问。</p>\\n<p>prepend函数。</p>\\n<ul>\\n<li>2.QLinkedList</li>\\n</ul>\\n<p>以链表的形式实现的。使用迭代器进行访问，插入和删除的数据项的操作时间相同。</p>\\n<ul>\\n<li>3.QVector</li>\\n</ul>\\n<p>以数组的形式实现的。在数组的前后添加数据会变得非常的快速，基于索引的方式访问。性能比QList更高一点，因为这个数据存储是连续的。</p>"}');export{e as data};
