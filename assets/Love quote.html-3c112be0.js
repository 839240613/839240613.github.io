import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-82a511c8.js";const e={},p=t(`<ul><li><ol><li></li></ol></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">==</span>R<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> 归并排序的边界，数组中只有一个数那就直接退出，因为不能够用中间分隔两边排序。

	<span class="token keyword">if</span><span class="token punctuation">(</span>R<span class="token operator">&gt;=</span>L<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">//快速排序的边界,需要记住R&gt;=L和arr为空的边界。</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><ol start="2"><li></li></ol></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>help_len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		arr<span class="token punctuation">[</span>L<span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> help<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同位置的重新装载数组的小技巧</p><ul><li><ol start="3"><li>链表找中点的办法。</li></ol></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span><span class="token punctuation">(</span>Fast<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>Fast<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			Fast <span class="token operator">=</span> Fast<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
			Low <span class="token operator">=</span> Low<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Fast<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			Fast <span class="token operator">=</span> Fast<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>链表找中间的神奇办法，666，</p><p>以快指针的下一个为运动判断，</p><p>以快指针的下一个的下一个作为分类，在快指针的下一个的下一个为空时，可以选择LOW的中间位置前后。</p><ul><li><ol start="4"><li>int防止溢出的初始化方法。</li></ol></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">-</span> <span class="token number">1.</span> <span class="token keyword">int</span> mid <span class="token operator">=</span> L<span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>R<span class="token operator">-</span>L<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 防止<span class="token keyword">int</span> mid溢出。
 <span class="token comment">//因为运算符的优先顺序，括号是必须的。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><ol start="5"><li>位图的控制代码</li></ol></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  则为<span class="token number">32</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">=</span><span class="token number">320</span>bit的数据。
<span class="token keyword">int</span> numberIndex <span class="token operator">=</span> <span class="token number">178</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> bitIndex <span class="token operator">=</span> <span class="token number">178</span><span class="token operator">%</span><span class="token number">32</span><span class="token punctuation">;</span>

<span class="token comment">//取位图的状态可用</span>
<span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>numberIndex<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>bitIndex<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//改为1</span>
arr<span class="token punctuation">[</span>numberIndex<span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//改为0</span>
arr<span class="token punctuation">[</span>numberIndex<span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><ol start="6"><li>装逼写法 判断的条件是max是多少</li></ol></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">while</span><span class="token punctuation">(</span>max <span class="token operator">=</span> max<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		radix<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>7.可以这样定义的</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
TreeNode <span class="token operator">*</span>left<span class="token punctuation">,</span><span class="token operator">*</span>right<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),o=[p];function l(c,i){return s(),a("div",null,o)}const d=n(e,[["render",l],["__file","Love quote.html.vue"]]);export{d as default};
