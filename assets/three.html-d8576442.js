import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as r,c,a as e,b as o,d as t,e as l}from"./app-e4bb05b4.js";const d={},i=l(`<h2 id="命令行命令" tabindex="-1"><a class="header-anchor" href="#命令行命令" aria-hidden="true">#</a> 命令行命令</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cc <span class="token operator">-</span>std<span class="token operator">==</span><span class="token number">99</span> <span class="token operator">-</span>Wall hello<span class="token punctuation">.</span>c <span class="token operator">-</span>o hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>-std 是设定标准</p><p>—Wall是显示所有信息</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cc <span class="token operator">--</span>version <span class="token comment">//显示gcc的版本</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="兼容" tabindex="-1"><a class="header-anchor" href="#兼容" aria-hidden="true">#</a> 兼容</h2><p>查看Linux是否有这个函数，用#ifdef #else 等等来使用假函数兼容系统。</p><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><p>语言就是，设定词语类型，加上一个词组，再加一个编译器不断地去读一个或者不是零个词组。</p>`,9),p={href:"https://www.cnblogs.com/jmilkfan-fanguiju/p/12789704.html",target:"_blank",rel:"noopener noreferrer"};function h(u,m){const a=s("ExternalLinkIcon");return r(),c("div",null,[i,e("p",null,[e("a",p,[o("跳转文章"),t(a)])])])}const v=n(d,[["render",h],["__file","three.html.vue"]]);export{v as default};
