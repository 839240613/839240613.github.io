import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as u,c as a,a as l,d as t,w as o,b as e,e as c}from"./app-e4bb05b4.js";const r="/assets/images/线框渲染.png",p="/assets/images/透视射影.png",h="/assets/images/扫描线渲染.png",f="/assets/images/抗锯齿.png",m={},g={class:"table-of-contents"},x=l("b",null,"个人PC的发展和图像的发展",-1),C={id:"_1-冷战时期",tabindex:"-1"},b=l("a",{class:"header-anchor",href:"#_1-冷战时期","aria-hidden":"true"},"#",-1),D=c('<p>冷战期间，苏联和美国在航天上进行一定的冷战。</p><p>由于太空的复杂性，需要电脑具有三个方面</p><ul><li><ol><li>处理大量数据的能力</li></ol></li><li><ol start="2"><li>更加的小</li></ol></li><li><ol start="3"><li>可靠</li></ol></li></ul><p>然后由于昂贵，也只有政府能够支付，政府在冷战时期也愿意支付。</p><p>但到了后来，冷战结束，政府不在支持这项昂贵的费用</p><p>所以日本这些电子消费就崛起，因为日本那时候的电子消费是市场承担的，</p><p>从那以后，所有的电子消费都慢慢的转向市场。成本直线下降。</p>',7),B={id:"_2-个人pc时代",tabindex:"-1"},k=l("a",{class:"header-anchor",href:"#_2-个人pc时代","aria-hidden":"true"},"#",-1),v=l("p",null,"根据上述的情况，公司的发展都往市场发展，因此个人PC也越来越强大。",-1),N=l("p",null,"BASIC语言就是微软的第一个产品，这是一种解释器，通过这个东西可以进行一定的编程。",-1),P=l("p",null,"随后就出现了基于2D界面的窗口可视化的系统。方便人们的工作。",-1),V=l("p",null,"也促进了图形化编程",-1),w=l("ul",null,[l("li",null,[l("ol",null,[l("li",null,"前端编程，设置相关的界面")])]),l("li",null,"2， 事件驱动编程。在窗口按钮和组件相应的时候就进行一系列的操作。")],-1),S={id:"_3-3d计算机图形学中的一些基本方法",tabindex:"-1"},z=l("a",{class:"header-anchor",href:"#_3-3d计算机图形学中的一些基本方法","aria-hidden":"true"},"#",-1),A=l("ul",null,[l("li",null,[l("ol",null,[l("li",null,"线框渲染")])])],-1),E=l("img",{src:r},null,-1),I=l("p",null,"通过平面投影和移动，来欺骗大脑是3D的。",-1),T=l("ul",null,[l("li",null,[l("ol",{start:"2"},[l("li",null,"透视投影")])])],-1),Z=l("img",{src:p},null,-1),j=l("p",null,"通过强大的美术学来欺骗视线。",-1),q=l("ul",null,[l("li",null,[l("ol",{start:"3"},[l("li",null,"基于线框渲染和三角形")])])],-1),y=l("img",{src:h},null,-1),F=l("p",null,"基于三角形和线框渲染，就可以欺骗视觉做出3D的图像。",-1),G=l("pre",null,[l("code",null,`- 但绘色的时候，可能会出现一些三角形很明显的问题，这就是抗锯齿解决的问题。
`)],-1),H=l("p",null,"以下为抗锯齿的简单原理：",-1),J=l("img",{src:f},null,-1),K=c(`<p>通过在线段边沿的颜色绘画的浅一点，来减弱三角形给人视觉的冲击感。</p><pre><code> -在3D中还需要解决的就是遮挡问题
</code></pre><p>第一种解决办法是画家算法，就是对每个物体的远近进行排序</p><p>第二个办法就是Z-Buffer算法，就是将物体的深度值进行排序。</p><p>这个办法就是在一个平面上通过一个算法把该绘画的图像放在这个平面上</p><p>但是由于两个物品可能是在同一个平面的，由于计算机浮点数等原因，这个物体和另一个物体的显示变成随机的</p><p>这种情况下就会发生闪烁现象。</p><ul><li><ol start="4"><li>背面剔除</li></ol></li></ul><p>由于很多时候，场景只需要一面，所以为了节省处理时间，多变形的背面往往都是被剔除的。</p><ul><li><ol start="5"><li>平面着色</li></ol></li></ul><p>这是对光照处理的一种方法。</p><p>对每个三角形进行法线的分析，对法线和光线进行夹角分析，根据分析的结果得到应该渲染的颜色亮度。</p>`,12);function L(M,O){const s=i("font"),_=i("router-link"),n=i("center");return u(),a("div",null,[l("nav",g,[l("ul",null,[l("li",null,[t(_,{to:"#_1-冷战时期"},{default:o(()=>[t(s,{color:"red"},{default:o(()=>[e("#")]),_:1}),e("1. 冷战时期")]),_:1})]),l("li",null,[t(_,{to:"#_2-个人pc时代"},{default:o(()=>[t(s,{color:"red"},{default:o(()=>[e("#")]),_:1}),e("2. 个人PC时代")]),_:1})]),l("li",null,[t(_,{to:"#_3-3d计算机图形学中的一些基本方法"},{default:o(()=>[t(s,{color:"red"},{default:o(()=>[e("#")]),_:1}),e("3. 3D计算机图形学中的一些基本方法")]),_:1})])])]),t(n,null,{default:o(()=>[t(s,{size:"+2"},{default:o(()=>[x]),_:1})]),_:1}),l("h2",C,[b,e(),t(s,{color:"red"},{default:o(()=>[e("#")]),_:1}),e("1. 冷战时期")]),D,l("h2",B,[k,e(),t(s,{color:"red"},{default:o(()=>[e("#")]),_:1}),e("2. 个人PC时代")]),v,N,P,V,w,l("h2",S,[z,e(),t(s,{color:"red"},{default:o(()=>[e("#")]),_:1}),e("3. 3D计算机图形学中的一些基本方法")]),A,t(n,null,{default:o(()=>[E]),_:1}),I,T,t(n,null,{default:o(()=>[Z]),_:1}),j,q,t(n,null,{default:o(()=>[y]),_:1}),F,G,H,t(n,null,{default:o(()=>[J]),_:1}),K])}const U=d(m,[["render",L],["__file","four.html.vue"]]);export{U as default};
