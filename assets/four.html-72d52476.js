import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as c,c as d,a as t,d as a,w as o,b as s,e}from"./app-e4bb05b4.js";const p="/assets/images/QMap和QHash.png",u="/assets/images/隐式转换的问题.png",g={},x=e(`<h3 id="顺序容器" tabindex="-1"><a class="header-anchor" href="#顺序容器" aria-hidden="true">#</a> 顺序容器</h3><ul><li>1.QList</li></ul><p>以数组列表(array list)的形式实现的。在其前和后添加数据会变得非常的快速，基于索引的方式访问。</p><p>prepend函数。</p><ul><li>2.QLinkedList</li></ul><p>以链表的形式实现的。使用迭代器进行访问，插入和删除的数据项的操作时间相同。</p><ul><li>3.QVector</li></ul><p>以数组的形式实现的。在数组的前后添加数据会变得非常的快速，基于索引的方式访问。性能比QList更高一点，因为这个数据存储是连续的。</p><ul><li>4.QStack</li></ul><p>Last In First Out(后进先出)的顺序容器。简称LIFO。</p><ul><li>5.QQueue</li></ul><p>First In First Out(先进先出)的顺序容器。简称FIFO。</p><h3 id="关联容器" tabindex="-1"><a class="header-anchor" href="#关联容器" aria-hidden="true">#</a> 关联容器</h3><ul><li>1.QSet</li></ul><p>基于散列表的集合模板类，存储数据的顺序是不固定的，查找值的速度非常快。</p><h4 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法：</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>QSet<span class="token operator">&lt;</span>Qstring<span class="token operator">&gt;</span> set<span class="token punctuation">;</span>

set <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;dog&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;cat&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;dog&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;bird&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;cat&quot;</span><span class="token punctuation">;</span>

set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;dog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查找是否属于这个玩意儿。</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>2.QMap</li></ul><p>提供一个字典。</p><h4 id="特别的用法" tabindex="-1"><a class="header-anchor" href="#特别的用法" aria-hidden="true">#</a> 特别的用法：</h4><p>timeout = map.value(&quot;timeout&quot;, 1000); //找到timeout，如果没有，返回1000</p><ul><li>3.QMulitMap</li></ul><p>一个关联数组，可以存储多个键值对。读取的时候需要所有的值则用values即可。</p><ul><li>4.QHash</li></ul><p>基于散列表的关联数组。</p>`,25),y=e('<div style="text-align:center;"><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><ul><li>5.QMultiHash</li></ul><p>和map是一样的，基于multimap的东西，一个健能够对应多个对。</p><h3 id="容器类的迭代" tabindex="-1"><a class="header-anchor" href="#容器类的迭代" aria-hidden="true">#</a> 容器类的迭代</h3><p>迭代器iterator。</p><p>iterator有两种类型，</p><p>第一种，JAVA型，易于使用并且有一些高级的功能。</p><p>第二种，STL型，效率更高。</p><ul><li>C++有一个很好的插入方法</li></ul><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>
容器名&lt;&lt; 变量 &lt;&lt; 变量 &lt;&lt; 变量;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="java迭代器" tabindex="-1"><a class="header-anchor" href="#java迭代器" aria-hidden="true">#</a> JAVA迭代器</h4><table><thead><tr><th style="text-align:center;">容器类</th><th style="text-align:center;">只读迭代器</th><th style="text-align:center;">读写迭代器</th></tr></thead><tbody><tr><td style="text-align:center;">QList或QQueue</td><td style="text-align:center;">QListIterator</td><td style="text-align:center;">QMutableListerator</td></tr><tr><td style="text-align:center;">QLinkedList</td><td style="text-align:center;">QLinkedListIterator</td><td style="text-align:center;">QMutableLinkedListIterator</td></tr><tr><td style="text-align:center;">QVector,QStack</td><td style="text-align:center;">QVectorIterator</td><td style="text-align:center;">QMutableVectorIterator</td></tr><tr><td style="text-align:center;">QSet</td><td style="text-align:center;">QSetIterator</td><td style="text-align:center;">QMutable</td></tr><tr><td style="text-align:center;">QMap或者QMutilMap</td><td style="text-align:center;">QMapIterator</td><td style="text-align:center;">QMutableMapIterator</td></tr><tr><td style="text-align:center;">QHash</td><td style="text-align:center;">QHashIterator</td><td style="text-align:center;">QMutableQHashIterator</td></tr></tbody></table><h4 id="用法-1" tabindex="-1"><a class="header-anchor" href="#用法-1" aria-hidden="true">#</a> 用法:</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>QList<span class="token operator">&lt;</span>QString<span class="token operator">&gt;</span> list<span class="token punctuation">;</span>
list <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
QListIterator<span class="token operator">&lt;</span>QString<span class="token operator">&gt;</span> <span class="token function">i</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>反向遍历：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>QList<span class="token operator">&lt;</span>QString<span class="token operator">&gt;</span> list<span class="token punctuation">;</span>
list <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
QListIterator<span class="token operator">&lt;</span>QString<span class="token operator">&gt;</span> <span class="token function">i</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
i<span class="token punctuation">.</span><span class="token function">toback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    i<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>修改:</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>QList<span class="token operator">&lt;</span>QString<span class="token operator">&gt;</span> list<span class="token punctuation">;</span>
list <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
MutableListIterator<span class="token operator">&lt;</span>QString<span class="token operator">&gt;</span> <span class="token function">i</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    i<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>迭代器一开始是在函数的正前面的。是不在数组的那个位置的。</p><ul><li>只读指针常用的函数</li></ul><table><thead><tr><th style="text-align:center;">名称</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">void toFront()</td><td style="text-align:center;">迭代器回到最前面，第一个数据之前</td></tr><tr><td style="text-align:center;">void toBack()</td><td style="text-align:center;">迭代器移动到列表的最后面</td></tr><tr><td style="text-align:center;">bool hasNext()</td><td style="text-align:center;">如果迭代器不处在最后一个位置，返回ture</td></tr><tr><td style="text-align:center;">const T&amp; next()</td><td style="text-align:center;">返回下一个数据项，并且迭代器后移一个位置</td></tr><tr><td style="text-align:center;">const T&amp; peekNext()</td><td style="text-align:center;">返回下一个数据，但是迭代器不后移位置</td></tr><tr><td style="text-align:center;">bool hasPrevious()</td><td style="text-align:center;">如果迭代器不在列表的最前面，返回ture</td></tr><tr><td style="text-align:center;">const T&amp; previous()</td><td style="text-align:center;">返回前一个数据,并且迭代器向前移动</td></tr><tr><td style="text-align:center;">const T&amp; peekPrevious()</td><td style="text-align:center;">返回前一个数据，但是迭代器不向前移动</td></tr></tbody></table><h4 id="stl迭代器" tabindex="-1"><a class="header-anchor" href="#stl迭代器" aria-hidden="true">#</a> STL迭代器</h4><table><thead><tr><th style="text-align:center;">容器类</th><th style="text-align:center;">只读迭代器</th><th style="text-align:center;">读写迭代器</th></tr></thead><tbody><tr><td style="text-align:center;">QList,QDueue</td><td style="text-align:center;">QList(数据类型)::const_iterator</td><td style="text-align:center;">QList(数据类型)::iterator</td></tr><tr><td style="text-align:center;">QLinkedList</td><td style="text-align:center;">QLinkedList(数据类型)::const_iterator</td><td style="text-align:center;">QLinkedList(数据类型)::iterator</td></tr><tr><td style="text-align:center;">Qvector,QStack</td><td style="text-align:center;">QVector(数据类型)::const_iterator</td><td style="text-align:center;">QVector(数据类型)::iterator</td></tr><tr><td style="text-align:center;">QSet</td><td style="text-align:center;">QSet(数据类型)::const_iterator</td><td style="text-align:center;">QSet(数据类型)::iterator</td></tr><tr><td style="text-align:center;">QMap</td><td style="text-align:center;">QMap(数据类型，数据类型)::const_iterator</td><td style="text-align:center;">QMap(数据类型，数据类型)::iterator</td></tr><tr><td style="text-align:center;">QMutilMap</td><td style="text-align:center;">QMutilMap(数据类型，数据类型)::const_iterator</td><td style="text-align:center;">QMutilMap(数据类型，数据类型)::iterator</td></tr><tr><td style="text-align:center;">QHash</td><td style="text-align:center;">QHash(数据类型，数据类型)</td><td style="text-align:center;">QHash(数据类型，数据类型)::const_iterator</td></tr><tr><td style="text-align:center;">QMultiHash</td><td style="text-align:center;">QMultiHash(数据类型，数据类型)</td><td style="text-align:center;">QMultiHash(数据类型，数据类型)::const_iterator</td></tr></tbody></table><p>还有const_reverse_iterator反向迭代器可以使用。</p><ul><li>STL迭代器和JAVA迭代器不同</li></ul><ol><li>STL迭代器是指向第一个元素的，JAVA是指向第一个元素前的位置。</li><li>结尾是一样的，都是数据之后。</li><li>STL使用++移动位置的。JAVA</li></ol><ul><li>隐式共享</li></ul><p>作用: 为了提高资源使用并减少数据复制。</p><p>用一个类来玩另一个类。</p>`,29),k={href:"https://zhuanlan.zhihu.com/p/579474797?utm_psn=1731035828024037376",target:"_blank",rel:"noopener noreferrer"},Q=e('<ul><li>隐式转换</li></ul><p>作用: 方便程序员的编写，自动变成合适的数据类型。</p><p>关于这个隐式共享，有一个问题我不是很了解。</p><div style="text-align:center;"><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><ul><li>foreach关键字</li></ul><p>存在于QtGlobal.h中，是一个宏定义。强大的宏定义。</p><p>foreach(QObject *obj, QObjectList list) { }</p><p>还可以用花括号围代码的东西。六六六。</p><p>foreach的遍历是复制容器的一个副本。</p><ul><li>Qt基本模块(Qt Essentials)</li></ul><table><thead><tr><th style="text-align:center;">模块</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">QT Core</td><td style="text-align:center;">其他模块都用到的核心非图形类</td></tr><tr><td style="text-align:center;">QT GUI</td><td style="text-align:center;">设计GUI界面的基础类、包括OpenGL</td></tr><tr><td style="text-align:center;">QT Multimedia</td><td style="text-align:center;">音频、视频、摄像头和广播功能的类</td></tr><tr><td style="text-align:center;">QT Network</td><td style="text-align:center;">使网络编程更简单和轻便的类</td></tr><tr><td style="text-align:center;">QT QML</td><td style="text-align:center;">用于QML和JavaScript语言的类</td></tr><tr><td style="text-align:center;">QT Quick</td><td style="text-align:center;">用于构建具有定制用户界面，基于Qt Quick的用户界面控件</td></tr><tr><td style="text-align:center;">QT Quick Controls</td><td style="text-align:center;">创建桌面样式用户界面，基于Qt Quick的用户界面空间</td></tr><tr><td style="text-align:center;">QT Quick Dialogs</td><td style="text-align:center;">用于Qt Quick的系统对话框类型</td></tr><tr><td style="text-align:center;">QT Quick Layouts</td><td style="text-align:center;">用于Qt Quick 2界面元素的布局项</td></tr><tr><td style="text-align:center;">QT SQL</td><td style="text-align:center;">使用SQL用于数据库操作类</td></tr><tr><td style="text-align:center;">QT Test</td><td style="text-align:center;">用于应用程序和库进行单元测试的类</td></tr><tr><td style="text-align:center;">QT Widgets</td><td style="text-align:center;">用于构建GUI界面的C++图形组件类</td></tr></tbody></table><p>QT -= gui 即可。 QT += sql 这样会好一点点</p><ul><li>Qt附加模块(Qt Add-Ons)</li></ul><table><thead><tr><th style="text-align:center;">模块</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">Active Qt</td><td style="text-align:center;">用于开发使用ActiveX和COM的Windows应用程序</td></tr><tr><td style="text-align:center;">Qt 3D</td><td style="text-align:center;">支持2D和3D渲染，提供用于开发近实时仿真系统的功能</td></tr><tr><td style="text-align:center;">Qt Bluetooth</td><td style="text-align:center;">提供访问蓝牙的功能</td></tr><tr><td style="text-align:center;">Qt Android Extras</td><td style="text-align:center;">提供Android平台相关的API</td></tr><tr><td style="text-align:center;">Qt Concurrent</td><td style="text-align:center;">提供一些类，无需使用底层的线程控制就可以编写多线程程序</td></tr><tr><td style="text-align:center;">Qt D-Bus</td><td style="text-align:center;">使进程间通过D-Bus协议通信的一些类</td></tr><tr><td style="text-align:center;">Qt Gamepad</td><td style="text-align:center;">使QT应用程序支持游戏手柄硬件的使用</td></tr><tr><td style="text-align:center;">Qt Image Formats</td><td style="text-align:center;">支持附加图片格式的插件，包括TIFF、MNG、TGA、WBMP</td></tr><tr><td style="text-align:center;">Qt Mac Extras</td><td style="text-align:center;">提供macOS平台相关的API</td></tr><tr><td style="text-align:center;">Qt NFC</td><td style="text-align:center;">提供访问NFC(近场通信)硬件的功能</td></tr><tr><td style="text-align:center;">Qt Positioning</td><td style="text-align:center;">提供一些类，用于通过GPS卫星、WiFi等定位</td></tr><tr><td style="text-align:center;">Qt Print Support</td><td style="text-align:center;">用于一些打印控制的类</td></tr><tr><td style="text-align:center;">Qt Purchasing</td><td style="text-align:center;">提供一些类，在QT应用程序内实现应用内购买的功能</td></tr><tr><td style="text-align:center;">Qt Sensors</td><td style="text-align:center;">提供访问传感器硬件的功能，一识别运动和手势</td></tr><tr><td style="text-align:center;">Qt Serial Bus</td><td style="text-align:center;">访问串行工业总线的功能，目前只支持CAN和Modbus协议</td></tr><tr><td style="text-align:center;">Qt SVG</td><td style="text-align:center;">提供显示SVG图片文件的类</td></tr><tr><td style="text-align:center;">Qt WebChannel</td><td style="text-align:center;">用于实现服务器端(QML或C++应用程序)与客户端(HTML/Javascript或QML应用程序)之间的P2P通讯</td></tr><tr><td style="text-align:center;">Qt WebEngine</td><td style="text-align:center;">提供类和函数，实现在应用程序中嵌入页面内容</td></tr><tr><td style="text-align:center;">Qt WebSockets</td><td style="text-align:center;">提供兼容于RFC 6455的WebSocket通信，WebSocket是实现客户端程序与远端主机进行双向通信的基于Web的协议</td></tr><tr><td style="text-align:center;">Qt Windows Extras</td><td style="text-align:center;">提供Windows平台相关的API</td></tr><tr><td style="text-align:center;">Qt XML</td><td style="text-align:center;">该模块不在维护了，应使用Qt Core中的QXmlStreamReader和QXmlStreamWriter</td></tr><tr><td style="text-align:center;">Qt XML Patterns</td><td style="text-align:center;">提供对XPath，XQuery，XSLT和XML等的支持</td></tr><tr><td style="text-align:center;">Qt Charts</td><td style="text-align:center;">用于数据显示的二维图表组件</td></tr><tr><td style="text-align:center;">Qt Data Visualization</td><td style="text-align:center;">用于3D数据可视化显示的界面组件</td></tr><tr><td style="text-align:center;">Qt Virtual Keyboard</td><td style="text-align:center;">实现不同输入法的虚拟键盘框架</td></tr></tbody></table><ul><li><p>QString类从字符串转换为整数的函数有: int toInt（） const long toInt（） const long toShort（） const long toUInt（） const long toLong（） const double toDouble（） const float toFloat（） const</p></li><li><p>相关的浮点数转换可以用 str.asprintf str.setNum QString::number(total,&quot;f&quot;,2)； QString::asprintf(&quot;%.2f&quot;,total);</p></li><li><p>QString的常用函数</p></li></ul><table><thead><tr><th style="text-align:center;">函数</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">append()</td><td style="text-align:center;">后面添加字符串</td></tr><tr><td style="text-align:center;">prepend()</td><td style="text-align:center;">前面添加字符串</td></tr><tr><td style="text-align:center;">toUpper()</td><td style="text-align:center;">字母全部转换为大写形式</td></tr><tr><td style="text-align:center;">toLower()</td><td style="text-align:center;">字母全部转换为小写形式</td></tr><tr><td style="text-align:center;">count()、size()、length()</td><td style="text-align:center;">返回字符串的字符个数</td></tr><tr><td style="text-align:center;">trimmed()、simplified()</td><td style="text-align:center;">前面是去掉字符串首尾的空格、第二个是中间连续的空格也用一个空格代替并且去掉首位的空格</td></tr><tr><td style="text-align:center;">lastIndexOf或indexOf()</td><td style="text-align:center;">寻找字符串</td></tr><tr><td style="text-align:center;">isNull()和isEmpty()</td><td style="text-align:center;">其中一个空字符串只有&quot;/0&quot;,isNull()但会false，而isEmpty()返回ture，所以常用的是isEmpty()</td></tr><tr><td style="text-align:center;">contains()</td><td style="text-align:center;">判断字符串是否包含某个字符串，可指定是否区分大小写</td></tr><tr><td style="text-align:center;">endsWith()或startsWith()</td><td style="text-align:center;">判断以某个字符串开头，还是以某个字符串结尾</td></tr><tr><td style="text-align:center;">left()或right()</td><td style="text-align:center;">从字符串左边多少个字符，或者从字符串右边取多少个字符</td></tr><tr><td style="text-align:center;">left()或right()</td><td style="text-align:center;">从字符串左边多少个字符，或者从字符串右边取多少个字符</td></tr><tr><td style="text-align:center;">section()</td><td style="text-align:center;">以sep作为分隔符，从start到end的字符串</td></tr></tbody></table>',16);function h(v,b){const l=n("font"),i=n("ExternalLinkIcon");return c(),d("div",null,[x,t("p",null,[t("strong",null,[a(l,{color:"red"},{default:o(()=>[s("QHash和QMap的区别：")]),_:1})])]),y,t("p",null,[t("a",k,[s("隐式共享的实现"),a(i)])]),Q])}const L=r(g,[["render",h],["__file","four.html.vue"]]);export{L as default};
