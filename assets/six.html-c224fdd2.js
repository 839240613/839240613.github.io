import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as r,e as n}from"./app-e4bb05b4.js";const d={},l=n(`<p>特别的发送的信号和槽是可以找到信号的，并且信号的相关信息也可以获取</p><p>sender() 获取信号</p><p>返回的类是QObeject，对这个类进行强制转换就行了。</p><h2 id="model-view" tabindex="-1"><a class="header-anchor" href="#model-view" aria-hidden="true">#</a> Model/View</h2><pre><code>模型和视图是Qt中用界面组件显示与编辑数据的一种数据结构。视图是显示和编辑数据的界面组件，模型是视图与原始数据之间的接口。
</code></pre><p>代理即负责从数据模型获取相应的数据，然后显示在编辑器里，修改数据后，又将其保存到数据模型中。</p><h3 id="model-view结构的一些概念" tabindex="-1"><a class="header-anchor" href="#model-view结构的一些概念" aria-hidden="true">#</a> Model/View结构的一些概念</h3><ul><li><ol><li>行号、列号、父项即可完全定义一个项的位置。</li></ol></li><li><ol start="2"><li>模型索引，保证数据的表示与数据存取方式隔离。顶层节点用QModelIndex()表示。 其中QModeIndex确实本身的。</li></ol></li></ul><h3 id="qfilesystemmodel" tabindex="-1"><a class="header-anchor" href="#qfilesystemmodel" aria-hidden="true">#</a> QFileSystemModel</h3><p>有一个类的用法相似，叫做QDirModel。但是QDirModel的功能与QFileSystemModel类似，但是QDirModel是使用主线程的， 而QFileSystemModel是使用单独线程的。</p><h3 id="qstringlistmodel" tabindex="-1"><a class="header-anchor" href="#qstringlistmodel" aria-hidden="true">#</a> QStringListmodel</h3><p>用于文字串的字体交互。</p><h3 id="qstandarditemmodel" tabindex="-1"><a class="header-anchor" href="#qstandarditemmodel" aria-hidden="true">#</a> QStandardItemModel</h3><p>用于存储自定义数据。常与TableWidget一起使用。</p><h2 id="标准对话框" tabindex="-1"><a class="header-anchor" href="#标准对话框" aria-hidden="true">#</a> 标准对话框</h2><h3 id="qfiledialog" tabindex="-1"><a class="header-anchor" href="#qfiledialog" aria-hidden="true">#</a> QFileDialog</h3><table><thead><tr><th style="text-align:center;">常用静态函数名称</th><th style="text-align:center;">函数功能</th></tr></thead><tbody><tr><td style="text-align:center;">QString getOpenFileName()</td><td style="text-align:center;">选择打开一个文件</td></tr><tr><td style="text-align:center;">QString getOpenFileNames()</td><td style="text-align:center;">选择打开多个文件</td></tr><tr><td style="text-align:center;">QString getSaveFileName()</td><td style="text-align:center;">选择保存一个文件</td></tr><tr><td style="text-align:center;">QString getExitstingDirectory()</td><td style="text-align:center;">选择一个已有的目录</td></tr><tr><td style="text-align:center;">QUrl getOpenFileUrl()</td><td style="text-align:center;">选择打开一个文件，可悬着远程网络文件</td></tr></tbody></table><h3 id="qcolordialog" tabindex="-1"><a class="header-anchor" href="#qcolordialog" aria-hidden="true">#</a> QColorDialog</h3><p>QColor getColor() 选择一个颜色</p><h3 id="qfontdialog" tabindex="-1"><a class="header-anchor" href="#qfontdialog" aria-hidden="true">#</a> QFontDialog</h3><p>QFont getFont() 选择一个字体</p><h3 id="qinputdialog" tabindex="-1"><a class="header-anchor" href="#qinputdialog" aria-hidden="true">#</a> QInputDialog</h3><table><thead><tr><th style="text-align:center;">常用静态函数名称</th><th style="text-align:center;">函数功能</th></tr></thead><tbody><tr><td style="text-align:center;">QString getText()</td><td style="text-align:center;">输入单行文字</td></tr><tr><td style="text-align:center;">int getInt()</td><td style="text-align:center;">输入整数</td></tr><tr><td style="text-align:center;">double getDouble()</td><td style="text-align:center;">输入浮点数</td></tr><tr><td style="text-align:center;">QString getItem()</td><td style="text-align:center;">从一个下拉列表框中选择输入</td></tr><tr><td style="text-align:center;">QString getMultiLineText()</td><td style="text-align:center;">输入多行字符串</td></tr></tbody></table><h3 id="qmessagebox" tabindex="-1"><a class="header-anchor" href="#qmessagebox" aria-hidden="true">#</a> QMessageBox</h3><table><thead><tr><th style="text-align:center;">常用静态函数名称</th><th style="text-align:center;">函数功能</th></tr></thead><tbody><tr><td style="text-align:center;">StandButton information()</td><td style="text-align:center;">信息提示对话框</td></tr><tr><td style="text-align:center;">StandButton question()</td><td style="text-align:center;">询问并获取是否确认的对话框</td></tr><tr><td style="text-align:center;">StandButton warning</td><td style="text-align:center;">警告信息提示对话框</td></tr><tr><td style="text-align:center;">StandButton critical</td><td style="text-align:center;">错误信息提示对话框</td></tr><tr><td style="text-align:center;">void about()</td><td style="text-align:center;">设置自定义信息的关于对话框</td></tr><tr><td style="text-align:center;">void Qt()</td><td style="text-align:center;">关于QT的对话框</td></tr></tbody></table><h3 id="关于窗口存在的事件" tabindex="-1"><a class="header-anchor" href="#关于窗口存在的事件" aria-hidden="true">#</a> 关于窗口存在的事件</h3><table><thead><tr><th style="text-align:center;">常用静态函数名称</th><th style="text-align:center;">函数功能</th></tr></thead><tbody><tr><td style="text-align:center;">closeEvent()</td><td style="text-align:center;">窗口关闭时触发的事件，</td></tr><tr><td style="text-align:center;">showEvent()</td><td style="text-align:center;">窗口显示时触发的事件</td></tr><tr><td style="text-align:center;">paintEvent</td><td style="text-align:center;">窗口绘制事件</td></tr><tr><td style="text-align:center;">mouseMovetEvent()</td><td style="text-align:center;">鼠标移动事件</td></tr><tr><td style="text-align:center;">mouseReleaseEvent()</td><td style="text-align:center;">鼠标释放事件</td></tr><tr><td style="text-align:center;">mousePressEvent()</td><td style="text-align:center;">鼠标按下事件</td></tr><tr><td style="text-align:center;">keyPressEvent()</td><td style="text-align:center;">按键按下事件</td></tr><tr><td style="text-align:center;">keyReleaseEvent()</td><td style="text-align:center;">按键释放事件</td></tr></tbody></table><h3 id="各种窗体类" tabindex="-1"><a class="header-anchor" href="#各种窗体类" aria-hidden="true">#</a> 各种窗体类</h3><table><thead><tr><th style="text-align:center;">类名</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">QWidget</td><td style="text-align:center;">在没有指定父容器时可作为独立的窗口，在指定父容器之后作为容器的内部组件</td></tr><tr><td style="text-align:center;">QDialog</td><td style="text-align:center;">用于设计对话框，以独立窗口显示</td></tr><tr><td style="text-align:center;">QMainWindow</td><td style="text-align:center;">用于设计带有菜单栏，工具栏，状态栏的主窗口，一般以独立窗口显示</td></tr><tr><td style="text-align:center;">QSolashScreen</td><td style="text-align:center;">用作应用程序启动时的splash窗口，没有边框</td></tr><tr><td style="text-align:center;">QMdiSubWindow</td><td style="text-align:center;">用于为QMdiArea提供一个子窗口，用于MDI(多文档显示)应用程序的显示</td></tr><tr><td style="text-align:center;">QDesktopWidget</td><td style="text-align:center;">具有多个显卡和多个显示器的系统具有多个桌面，这个类提供用户桌面信息，如屏幕个数，每个屏幕的大小</td></tr><tr><td style="text-align:center;">QWindow</td><td style="text-align:center;">通过底层的窗口系统表示一个窗口的类，一般作为一个父容器的嵌入式窗体，不作为独立窗体。</td></tr></tbody></table><h3 id="窗体类重要特性的设置" tabindex="-1"><a class="header-anchor" href="#窗体类重要特性的设置" aria-hidden="true">#</a> 窗体类重要特性的设置</h3><h4 id="attribute" tabindex="-1"><a class="header-anchor" href="#attribute" aria-hidden="true">#</a> Attribute</h4><table><thead><tr><th style="text-align:center;">类名</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">Qt::WA_AcceptDrops</td><td style="text-align:center;">允许窗体接受拖放来的组件</td></tr><tr><td style="text-align:center;">Qt::WA_DeleteOnCLose</td><td style="text-align:center;">窗体关闭时删除自己，释放内存</td></tr><tr><td style="text-align:center;">Qt::WA_Hover</td><td style="text-align:center;">鼠标进入或移出窗体时产生paint事件</td></tr><tr><td style="text-align:center;">Qt::WA_AcceptTouchEvents</td><td style="text-align:center;">窗体是否接受触屏事件</td></tr></tbody></table><h4 id="flag" tabindex="-1"><a class="header-anchor" href="#flag" aria-hidden="true">#</a> FLag</h4><table><thead><tr><th style="text-align:center;">类名</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">Qt::Widget</td><td style="text-align:center;">默认的窗体类型，如果有父类就作为父类的子窗口，如果没有父类就作为独立窗口</td></tr><tr><td style="text-align:center;">Qt::Window</td><td style="text-align:center;">窗体有边框，可以移动，关闭等，不管是否有父类，都是一个窗口</td></tr><tr><td style="text-align:center;">Qt::Dialog</td><td style="text-align:center;">窗体有边框，可以移动，关闭等，并且显示未一个对话框</td></tr><tr><td style="text-align:center;">Qt::Popup</td><td style="text-align:center;">表明这个窗体是用作弹出式菜单的窗体</td></tr><tr><td style="text-align:center;">Qt::Tool</td><td style="text-align:center;">表明这个窗体是一个工具窗体，没有边框，不能移动，关闭等，具有更小的标题栏和关闭按钮</td></tr><tr><td style="text-align:center;">Qt::SplashScreen</td><td style="text-align:center;">表明这个窗体是一个splash窗口，是QSplashScreen类的缺省类</td></tr><tr><td style="text-align:center;">Qt::Desktop</td><td style="text-align:center;">表明这个窗体是桌面</td></tr><tr><td style="text-align:center;">Qt::SubWindow</td><td style="text-align:center;">表明窗体是子窗体</td></tr><tr><td style="text-align:center;">控制窗体显示效果的产量</td><td style="text-align:center;">无</td></tr><tr><td style="text-align:center;">Qt::MSWindowsFixedSizeDialogHint</td><td style="text-align:center;">在Windows平台上，使窗口具有更窄的边框，用于固定大小的对话框</td></tr><tr><td style="text-align:center;">Qt::FramlessWindowHint</td><td style="text-align:center;">创建无边框窗口</td></tr><tr><td style="text-align:center;">定制窗体外观的常量</td><td style="text-align:center;">需要先设置Qt::CusomizeWindowHint</td></tr><tr><td style="text-align:center;">Qt::CustomizeWindowHint</td><td style="text-align:center;">关闭缺省的窗口标题栏</td></tr><tr><td style="text-align:center;">Qt::WindowTitleHint</td><td style="text-align:center;">显示窗口标题栏</td></tr><tr><td style="text-align:center;">Qt::WindowSystemMenuHint</td><td style="text-align:center;">显示系统菜单</td></tr><tr><td style="text-align:center;">Qt::WindowMinimizeButtonHint</td><td style="text-align:center;">显示最小化按钮</td></tr><tr><td style="text-align:center;">Qt::WindowMaximizeButtonHint</td><td style="text-align:center;">显示最大化按钮</td></tr><tr><td style="text-align:center;">Qt::WindowCloseButtonHint</td><td style="text-align:center;">显示关闭按钮</td></tr><tr><td style="text-align:center;">Qt::WindowContextHelpButtonHint</td><td style="text-align:center;">显示帮助按钮</td></tr><tr><td style="text-align:center;">Qt::WindowShadeButtonHint</td><td style="text-align:center;">显示卷起按钮</td></tr><tr><td style="text-align:center;">Qt::WindowStaysOnTopHint</td><td style="text-align:center;">窗口总保持在最前面</td></tr><tr><td style="text-align:center;">Qt::WindowStaysOnBottomHint</td><td style="text-align:center;">窗口总保持在最后面</td></tr><tr><td style="text-align:center;">Qt::WindowTransparentForInput</td><td style="text-align:center;">窗口透明，用户可以透过它看到下面的窗口,只作为输出，不接受输入</td></tr></tbody></table><h4 id="设置窗口状态" tabindex="-1"><a class="header-anchor" href="#设置窗口状态" aria-hidden="true">#</a> 设置窗口状态</h4><p>setWindowState();</p><table><thead><tr><th style="text-align:center;">常量</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">Qt::WindowMinimized</td><td style="text-align:center;">最小化窗口</td></tr><tr><td style="text-align:center;">Qt::WindowMaximized</td><td style="text-align:center;">最大化窗口</td></tr><tr><td style="text-align:center;">Qt::WindowFullScreen</td><td style="text-align:center;">全屏显示窗口</td></tr><tr><td style="text-align:center;">Qt::WindowActive</td><td style="text-align:center;">窗口处于活动状态，接受键盘的输入</td></tr><tr><td style="text-align:center;">Qt::WindowNoState</td><td style="text-align:center;">窗口正常状态</td></tr></tbody></table><h3 id="设置窗口模态" tabindex="-1"><a class="header-anchor" href="#设置窗口模态" aria-hidden="true">#</a> 设置窗口模态</h3><p>setWindowModality();</p><table><thead><tr><th style="text-align:center;">常量</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">Qt::NonModal</td><td style="text-align:center;">窗口不是模态的，不会阻止其他窗口的输入</td></tr><tr><td style="text-align:center;">Qt::WindowModal</td><td style="text-align:center;">窗口是模态的，对其父窗口，所有的上级父窗口都是模态的</td></tr><tr><td style="text-align:center;">Qt::ApplicationModal</td><td style="text-align:center;">窗口对整个应用程序都是模态的，阻止所有窗口的输入</td></tr></tbody></table><h3 id="设置窗口透明度" tabindex="-1"><a class="header-anchor" href="#设置窗口透明度" aria-hidden="true">#</a> 设置窗口透明度</h3><p>setWindowOpacity(); 1.0 表示完全不透明，0.0 表示完全透明</p><h3 id="设置窗口阴影" tabindex="-1"><a class="header-anchor" href="#设置窗口阴影" aria-hidden="true">#</a> 设置窗口阴影</h3><p>setWindowShadow();</p><table><thead><tr><th style="text-align:center;">常量</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">Qt::Plain</td><td style="text-align:center;">没有阴影</td></tr><tr><td style="text-align:center;">Qt::Raised</td><td style="text-align:center;">凸起的阴影</td></tr><tr><td style="text-align:center;">Qt::Sunken</td><td style="text-align:center;">凹陷的阴影</td></tr></tbody></table><h2 id="文件目录操作相关类" tabindex="-1"><a class="header-anchor" href="#文件目录操作相关类" aria-hidden="true">#</a> 文件目录操作相关类</h2><table><thead><tr><th style="text-align:center;">类名</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">QCoreApplication</td><td style="text-align:center;">用于提取应用程序路径，程序名等文件信息</td></tr><tr><td style="text-align:center;">QFile</td><td style="text-align:center;">出了打开文件操作外，QFile还有复制文件，删除文件等功能</td></tr><tr><td style="text-align:center;">QFileInfo</td><td style="text-align:center;">用于摄取文件的信息，包括路径，文件名，后缀等。</td></tr><tr><td style="text-align:center;">QDir</td><td style="text-align:center;">用于摄取目录或文件信息，获取一个目录下的文件或目录列表，创建或删除目录和文件，文件重命名等</td></tr><tr><td style="text-align:center;">QTemporaryDir与QTemporaryFile</td><td style="text-align:center;">用于创建临时目录和临时文件</td></tr><tr><td style="text-align:center;">QFileSystem Watcher</td><td style="text-align:center;">文件和目录监听类，监听目录下文件的添加，删除等变化，</td></tr></tbody></table><h3 id="qfileinfo类" tabindex="-1"><a class="header-anchor" href="#qfileinfo类" aria-hidden="true">#</a> QFileInfo类</h3><table><thead><tr><th style="text-align:center;">静态函数</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">void setFile(QString &amp;file)</td><td style="text-align:center;">设置一个文件名，作为QFileInfo操作的文件</td></tr><tr><td style="text-align:center;">QString absoluteFilePath()</td><td style="text-align:center;">返回带有文件名的绝对文件路径</td></tr><tr><td style="text-align:center;">QString absolutePath()</td><td style="text-align:center;">返回绝对路径，不带文件名</td></tr><tr><td style="text-align:center;">QString fileName()</td><td style="text-align:center;">返回取出路径的文件名</td></tr><tr><td style="text-align:center;">QString filePath()</td><td style="text-align:center;">返回包含路径的文件名</td></tr><tr><td style="text-align:center;">QString path()</td><td style="text-align:center;">返回不含文件名的路径</td></tr><tr><td style="text-align:center;">QString baseName()</td><td style="text-align:center;">返回文件基名，第一个.之前的文件名</td></tr><tr><td style="text-align:center;">QString completebaseName()</td><td style="text-align:center;">返回文件基名，最后一个.之前的文件名</td></tr><tr><td style="text-align:center;">QString suffix()</td><td style="text-align:center;">最后一个&quot;.&quot;之后的后缀</td></tr><tr><td style="text-align:center;">QString completesuffix()</td><td style="text-align:center;">第一个&quot;.&quot;之前的后缀</td></tr><tr><td style="text-align:center;">bool isDir()</td><td style="text-align:center;">判断当前对象是否是一个目录或者目录的快捷方式</td></tr><tr><td style="text-align:center;">bool isFile()</td><td style="text-align:center;">判断当前对象是否是一个文件或文件的快捷方式</td></tr><tr><td style="text-align:center;">bool isExecutable()</td><td style="text-align:center;">判断当前文件是否是可执行文件</td></tr><tr><td style="text-align:center;">QDateTime created()</td><td style="text-align:center;">判断文件创建时间</td></tr><tr><td style="text-align:center;">QDateTime latModified()</td><td style="text-align:center;">返回文件最后一次被修改的时间</td></tr><tr><td style="text-align:center;">QDateTime lastRead()</td><td style="text-align:center;">返回文件最后一次被读取的时间</td></tr><tr><td style="text-align:center;">bool exists()</td><td style="text-align:center;">判断文件是否存在</td></tr><tr><td style="text-align:center;">bool exists(QString&amp; file)</td><td style="text-align:center;">静态函数，判断file表示的文件是否存在</td></tr></tbody></table><h3 id="qcoreapplication类" tabindex="-1"><a class="header-anchor" href="#qcoreapplication类" aria-hidden="true">#</a> QCoreApplication类</h3><table><thead><tr><th style="text-align:center;">函数原型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">QString applicationDirPath()</td><td style="text-align:center;">返回应用启动路径</td></tr><tr><td style="text-align:center;">QString applicationFilePath()</td><td style="text-align:center;">发挥应用程序的带有目录的完整文件名</td></tr><tr><td style="text-align:center;">QString applicationName()</td><td style="text-align:center;">返回应用程序名称，无路径无后缀</td></tr><tr><td style="text-align:center;">QStringLIst libarayPaths()</td><td style="text-align:center;">返回动态加载库文件时，应用程序搜索的目录列表</td></tr><tr><td style="text-align:center;">void setOrganizationName(QString &amp;orgName)</td><td style="text-align:center;">为应用程序设置一个机构名</td></tr><tr><td style="text-align:center;">QString organizationName()</td><td style="text-align:center;">返回应用程序的机构名</td></tr><tr><td style="text-align:center;">void exit()</td><td style="text-align:center;">退出程序</td></tr></tbody></table><h3 id="qfile类" tabindex="-1"><a class="header-anchor" href="#qfile类" aria-hidden="true">#</a> QFile类</h3><h4 id="静态函数" tabindex="-1"><a class="header-anchor" href="#静态函数" aria-hidden="true">#</a> 静态函数</h4><table><thead><tr><th style="text-align:center;">函数原型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">bool copy(QString &amp;filename，QString &amp;filename)</td><td style="text-align:center;">复制文件</td></tr><tr><td style="text-align:center;">bool rename(QString &amp;oldName，QString &amp;Newname)</td><td style="text-align:center;">文件重命名</td></tr><tr><td style="text-align:center;">bool remove(QString &amp;filename，QString &amp;filename)</td><td style="text-align:center;">删除文件</td></tr><tr><td style="text-align:center;">bool exists(QString &amp;fileName)</td><td style="text-align:center;">判断文件是否存在</td></tr><tr><td style="text-align:center;">bool setPermissions(QString &amp;fileName,Permissions permissions)</td><td style="text-align:center;">设置权限</td></tr><tr><td style="text-align:center;">Permissions permissions(QString &amp;fileName)</td><td style="text-align:center;">返回文件的权限</td></tr></tbody></table><h4 id="成员函数" tabindex="-1"><a class="header-anchor" href="#成员函数" aria-hidden="true">#</a> 成员函数</h4><p>多了一个size()</p><h3 id="qdir类" tabindex="-1"><a class="header-anchor" href="#qdir类" aria-hidden="true">#</a> QDir类</h3><h4 id="静态函数-1" tabindex="-1"><a class="header-anchor" href="#静态函数-1" aria-hidden="true">#</a> 静态函数</h4><table><thead><tr><th style="text-align:center;">函数原型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">QString tempPath()</td><td style="text-align:center;">返回临时文件目录名称</td></tr><tr><td style="text-align:center;">QString rootPath()</td><td style="text-align:center;">返回根目录名称</td></tr><tr><td style="text-align:center;">QString homePath()</td><td style="text-align:center;">返回主目录的名称</td></tr><tr><td style="text-align:center;">bool currentPath()</td><td style="text-align:center;">返回当前目录的名称</td></tr><tr><td style="text-align:center;">QFileInfoList drives()</td><td style="text-align:center;">返回系统的根目录列表，在Windows上返回的是盘符列表</td></tr></tbody></table><h4 id="成员函数-1" tabindex="-1"><a class="header-anchor" href="#成员函数-1" aria-hidden="true">#</a> 成员函数</h4><table><thead><tr><th style="text-align:center;">函数原型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">QString absoluteFilePath(QString &amp;fileName)</td><td style="text-align:center;">返回当前目录下的一个文件，含绝对路径文件名</td></tr><tr><td style="text-align:center;">QString absolutePath()</td><td style="text-align:center;">返回当前目录的绝对路径</td></tr><tr><td style="text-align:center;">QString canonicalPath()</td><td style="text-align:center;">返回当前目录的标准路径</td></tr><tr><td style="text-align:center;">QString filePath()</td><td style="text-align:center;">返回目录下一个文件的目录名</td></tr><tr><td style="text-align:center;">QString dirName()</td><td style="text-align:center;">返回最后一级目录的名称</td></tr><tr><td style="text-align:center;">bool exists()</td><td style="text-align:center;">判断当前目录是否存在</td></tr><tr><td style="text-align:center;">QStringList entryList(Filters filters=NoFilter,SortFlags sort = Nosort)</td><td style="text-align:center;">返回目录下的所有文件名，子目录名</td></tr><tr><td style="text-align:center;">bool mkdir(QString &amp;dirName)</td><td style="text-align:center;">在当前目录下建一个名称为dirName的子目录</td></tr><tr><td style="text-align:center;">bool rmdir(QString &amp;dirName)</td><td style="text-align:center;">删除指定的目录dirName</td></tr><tr><td style="text-align:center;">bool remove(QString &amp;dirName)</td><td style="text-align:center;">删除当前目录下的文件fileName</td></tr><tr><td style="text-align:center;">bool rename(QString &amp;dirName,QString &amp;newName)</td><td style="text-align:center;">将文件或目录改为New名字</td></tr><tr><td style="text-align:center;">void setPath(QString &amp;path)</td><td style="text-align:center;">设置QDir对象的当前目录</td></tr><tr><td style="text-align:center;">void removeRecursively</td><td style="text-align:center;">删除当前目录及其下面的所有文件</td></tr></tbody></table><h4 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h4><p>QDir::AllDirs :列出所有目录名 QDir::Files :列出所有文件名 QDir::Drives :列出所有盘符(Unix系统下无效) QDir::NoDotAndDotDot :不列出&quot;.&quot;和&quot;..&quot; QDir::AllEntries：列出所有目录和文件名</p><h3 id="qtemporarydir类和qtemporaryfile类" tabindex="-1"><a class="header-anchor" href="#qtemporarydir类和qtemporaryfile类" aria-hidden="true">#</a> QTemporaryDir类和QTemporaryFile类</h3><p>不是那么清楚其作用</p><p>QTemporaryDir类用于创建，删除临时目录的类。</p><table><thead><tr><th style="text-align:center;">函数原型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">void setAutoRemove(bool b)</td><td style="text-align:center;">设置为是否自动删除</td></tr><tr><td style="text-align:center;">QString path()</td><td style="text-align:center;">返回创建的临时目录名称</td></tr><tr><td style="text-align:center;">bool remove()</td><td style="text-align:center;">删除此临时目录及其下面所有文件</td></tr></tbody></table><h3 id="qfilesystemwatcher类" tabindex="-1"><a class="header-anchor" href="#qfilesystemwatcher类" aria-hidden="true">#</a> QFileSystemWatcher类</h3><p>文件监听类</p><h4 id="成员函数-2" tabindex="-1"><a class="header-anchor" href="#成员函数-2" aria-hidden="true">#</a> 成员函数</h4><table><thead><tr><th style="text-align:center;">函数原型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">bool addPath(QString&amp; path)</td><td style="text-align:center;">添加一个监听的目录或文件</td></tr><tr><td style="text-align:center;">QStringList (QStringList&amp; paths)</td><td style="text-align:center;">添加一个监听的目录或文件列表</td></tr><tr><td style="text-align:center;">QStringList directories()</td><td style="text-align:center;">返回监听的目录列表</td></tr><tr><td style="text-align:center;">QStringList files()</td><td style="text-align:center;">返回监听的文件列表</td></tr><tr><td style="text-align:center;">bool removePath(QString &amp;path)</td><td style="text-align:center;">移除监听的目录或文件</td></tr><tr><td style="text-align:center;">QStringList removePaths(QStringList &amp;paths)</td><td style="text-align:center;">移除监听的目录或文件列表</td></tr></tbody></table><p>这个类会发射两个信号，</p><ul><li><ol><li>directoryChanged(QString &amp;path) 目录或文件被创建或删除时发射此信号</li></ol></li><li><ol start="2"><li>fileChanged(QString &amp;path) 目录或文件被修改时发射此信号</li></ol></li></ul><p>用法主要就是，添加目录之后和两个信号进行绑定</p><p>注意在removePath的时候需要解绑定。</p>`,75),a=[l];function i(s,c){return e(),r("div",null,a)}const x=t(d,[["render",i],["__file","six.html.vue"]]);export{x as default};
