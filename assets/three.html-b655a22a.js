import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as u,a as n,b as s,d as a,w as e,e as p}from"./app-82a511c8.js";const r="/assets/images/归并排序.png",d="/assets/images/链表快排.gif",k="/assets/images/快速链排.png",m={},v={id:"_1-各种排序的结论",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#_1-各种排序的结论","aria-hidden":"true"},"#",-1),h=n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"名称"),n("th",{style:{"text-align":"center"}},"时间常数"),n("th",{style:{"text-align":"center"}},"空间常数"),n("th",{style:{"text-align":"center"}},"稳定性"),n("th",{style:{"text-align":"center"}},"描述"),n("th",{style:{"text-align":"center"}},"需要注意的问题"),n("th",{style:{"text-align":"center"}},"具体时间数字")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"center"}},"归并排序"),n("td",{style:{"text-align":"center"}},[s("O("),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mi",null,"N"),n("mn",null,"2")])]),n("annotation",{encoding:"application/x-tex"},"N^{2}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])])])])]),s(")")]),n("td",{style:{"text-align":"center"}},"O(N)"),n("td",{style:{"text-align":"center"}},[n("a",{href:"#%E7%A8%B3%E5%AE%9A%E6%80%A7"},"稳定")]),n("td",{style:{"text-align":"center"}},[n("a",{href:"#%E6%8F%8F%E8%BF%B0"},"需要稳定情况下最好的算法")]),n("td",{style:{"text-align":"center"}},[n("a",{href:"#%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98"},"merge的理解")]),n("td",{style:{"text-align":"center"}},"O(NlogN)")]),n("tr",null,[n("td",{style:{"text-align":"center"}},"快速排序"),n("td",{style:{"text-align":"center"}},[s("O("),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mi",null,"N"),n("mn",null,"2")])]),n("annotation",{encoding:"application/x-tex"},"N^{2}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])])])])]),s(")")]),n("td",{style:{"text-align":"center"}},"O(logN)"),n("td",{style:{"text-align":"center"}},[n("a",{href:"#%E7%A8%B3%E5%AE%9A%E6%80%A7-1"},"不稳")]),n("td",{style:{"text-align":"center"}},[n("a",{href:"#%E6%8F%8F%E8%BF%B0-1"},"数组较大时最快的算法")]),n("td",{style:{"text-align":"center"}},[n("a",{href:"#%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98-1"},"哪边先动")]),n("td",{style:{"text-align":"center"}},[s("O(NlogN)-O("),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mi",null,"N"),n("mn",null,"2")])]),n("annotation",{encoding:"application/x-tex"},"N^{2}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])])])])]),s(")")])])])],-1),g={id:"_2-归并排序",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#_2-归并排序","aria-hidden":"true"},"#",-1),x=p('<ul><li>.<strong>思维模式：</strong></li></ul><p><strong>无脑双分，然后归并。</strong></p><div style="text-align:center;"><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><ul><li>.<strong>代码：</strong></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dichotomy</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span>
<span class="token punctuation">{</span>	
	<span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">==</span>R<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">int</span> mid <span class="token operator">=</span> L<span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>R<span class="token operator">-</span>L<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">dichotomy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>L<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">dichotomy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>L<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> help<span class="token punctuation">[</span>R<span class="token operator">-</span>L<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> help_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>help<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>help<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">int</span> p1 <span class="token operator">=</span> L<span class="token punctuation">;</span>
	<span class="token keyword">int</span> p2 <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span>mid <span class="token operator">&amp;&amp;</span> p2<span class="token operator">&lt;=</span>R<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">?</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>p2<span class="token operator">&lt;=</span>R<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>help_len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		arr<span class="token punctuation">[</span>L<span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> help<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 
	<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">dichotomy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

	<span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="稳定性" tabindex="-1"><a class="header-anchor" href="#稳定性" aria-hidden="true">#</a> 稳定性</h4><p>稳定，因为分开，需要交换左边等于右边是不会交换的。所以相同的时候不会交换，相同的数永远都在左边。</p><h4 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h4>`,8),w=n("ul",null,[n("li",null,[n("ol",null,[n("li",null,"具有稳定性最快的算法，代价是需要格外的空间开销。")])]),n("li",null,[n("ol",{start:"2"},[n("li",null,[s("因为用到了数组本身的顺序，所以时间不是"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"N"),n("mn",null,"2")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(N^{2})")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])]),n("span",{class:"mclose"},")")])])])])])])],-1),f=n("h4",{id:"需要注意的问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#需要注意的问题","aria-hidden":"true"},"#"),s(" 需要注意的问题")],-1),_=n("ul",null,[n("li",null,[n("ol",null,[n("li",null,"在最后的merge中，是需要把两个数组整合起来的，所以mid也需要传进去，用作区分两个数组的标记。")])]),n("li",null,[n("ol",{start:"2"},[n("li",null,"递归的接受可能再数组的任意位置，所以边界要设好。")])])],-1),L={id:"_2-归并排序-链表",tabindex:"-1"},E=n("a",{class:"header-anchor",href:"#_2-归并排序-链表","aria-hidden":"true"},"#",-1),N=p(`<ul><li>.<strong>思维模式：</strong></li></ul><p>和数组的是一致的，但是链表的细节和归并的理解需要更加准确。</p><ul><li>.<strong>代码：</strong><strong>快慢指针找链表中点的办法：</strong></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Node<span class="token operator">*</span> <span class="token function">get_mid</span><span class="token punctuation">(</span>list head<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	list Fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
	list Low <span class="token operator">=</span> head<span class="token punctuation">;</span>
	
	<span class="token keyword">while</span><span class="token punctuation">(</span>Fast<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>Fast<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			Fast <span class="token operator">=</span> Fast<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
			Low <span class="token operator">=</span> Low<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Fast<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			Fast <span class="token operator">=</span> Fast<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> Low<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>二分递归函数：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>list <span class="token function">mergeSort_list</span><span class="token punctuation">(</span>list head<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//the boundary of the list.</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>head<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>
	
	<span class="token comment">//find the middle of the list</span>
	list mid <span class="token operator">=</span> <span class="token function">get_mid</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
	list R <span class="token operator">=</span> mid<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
	mid<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token comment">//get the list divided in half</span>
	list L1 <span class="token operator">=</span> <span class="token function">mergeSort_list</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> list L2 <span class="token operator">=</span> <span class="token function">mergeSort_list</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>L1<span class="token punctuation">,</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>归并函数：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>list <span class="token function">merge</span><span class="token punctuation">(</span>list head1<span class="token punctuation">,</span>list head2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	list begin1 <span class="token operator">=</span> head1<span class="token punctuation">;</span>list begin2 <span class="token operator">=</span> head2<span class="token punctuation">;</span>
	<span class="token comment">//creat a flase head in order to creat the list sorted</span>
	list dummy <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>listpoint<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	dummy<span class="token operator">-&gt;</span>x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	dummy<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	list tail <span class="token operator">=</span> dummy<span class="token punctuation">;</span>
	
	<span class="token comment">//the first case neither pointer is at the boundary</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>begin1<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>begin2<span class="token punctuation">)</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>begin1<span class="token operator">-&gt;</span>x <span class="token operator">&lt;=</span> begin2<span class="token operator">-&gt;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
		tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> begin1<span class="token punctuation">;</span>
		tail <span class="token operator">=</span> tail<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
		begin1 <span class="token operator">=</span> begin1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
	 <span class="token punctuation">}</span> 
	 <span class="token keyword">else</span> <span class="token punctuation">{</span>
	 	tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> begin2<span class="token punctuation">;</span>
	 	tail <span class="token operator">=</span> tail<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
	 	begin2 <span class="token operator">=</span> begin2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
	 <span class="token punctuation">}</span>
	 <span class="token comment">//the second case begin2 is at the boundary</span>
	 <span class="token keyword">while</span><span class="token punctuation">(</span>begin1<span class="token punctuation">)</span>
	 <span class="token punctuation">{</span>
	 	tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> begin1<span class="token punctuation">;</span>
	 	tail <span class="token operator">=</span> tail<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
		begin1 <span class="token operator">=</span> begin1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> 
	 <span class="token punctuation">}</span>
	 <span class="token comment">//the third case brgin1 is at the boundary</span>
	 <span class="token keyword">while</span><span class="token punctuation">(</span>begin2<span class="token punctuation">)</span>
	 <span class="token punctuation">{</span>
	 	tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> begin2<span class="token punctuation">;</span>
	 	tail <span class="token operator">=</span> tail<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
	 	begin2 <span class="token operator">=</span> begin2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
	 <span class="token punctuation">}</span>
	<span class="token keyword">return</span> dummy<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
 <span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="需要注意的问题-1" tabindex="-1"><a class="header-anchor" href="#需要注意的问题-1" aria-hidden="true">#</a> 需要注意的问题</h4><ul><li><ol><li>再merge中也是需要创建一个新的链表返回的，创建的的链表最好的办法就是创建一个假头。</li></ol></li><li><ol start="2"><li>链表中二分法是直接掐断的。</li></ol></li></ul>`,10),F={id:"_3-快速排序",tabindex:"-1"},z=n("a",{class:"header-anchor",href:"#_3-快速排序","aria-hidden":"true"},"#",-1),A=n("p",null,[s("."),n("strong",null,"思维模式：")],-1),R={href:"https://juejin.cn/post/6844903910772047886?searchId=2023120712553094B672BBF1728CEEF0B8",target:"_blank",rel:"noopener noreferrer"},B=p(`<p>核心思想就是只找到指定基准值的位置，在数组中表现为交换。</p><p><strong>数组可以两边往中间走。</strong></p><ul><li>.<strong>代码：</strong></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span>
<span class="token punctuation">{</span>	
	<span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>	<span class="token keyword">return</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">&gt;=</span>R<span class="token punctuation">)</span> 	<span class="token keyword">return</span> <span class="token punctuation">;</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> L<span class="token punctuation">;</span> <span class="token comment">//这里绝对不可以+1</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> R<span class="token punctuation">;</span>
	<span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//set the arr[L] as the srot number</span>
	
	<span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> j<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>	
		<span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;=</span>temp <span class="token operator">&amp;&amp;</span> j<span class="token operator">&gt;</span>i<span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>temp <span class="token operator">&amp;&amp;</span> j<span class="token operator">&gt;</span>i<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	arr<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
	
	<span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>L<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="描述-1" tabindex="-1"><a class="header-anchor" href="#描述-1" aria-hidden="true">#</a> 描述</h4><ul><li><ol><li>和归并排序相比，快排是先进行荷兰国旗操作再分开的，而归并是直接二分的。</li></ol></li><li><ol start="2"><li>常数时间来说，快排相比归并和堆排序都要快一些。</li></ol></li><li><ol start="3"><li>各位空间需要0（logN）是递归的需要。</li></ol></li></ul><h4 id="需要注意的问题-2" tabindex="-1"><a class="header-anchor" href="#需要注意的问题-2" aria-hidden="true">#</a> 需要注意的问题</h4><ul><li><ol><li>左边和右边的移动都不只一次所以需要while。并且要注意左边和右边都不能越过对方。</li></ol></li><li><ol start="2"><li>最左边去标准值的时候，最右边先驱动。</li></ol></li></ul><p>因为有可能标准值就在左边，如果左边先驱动因为是&lt;=的，所以有可能不能满足标准值在最右边。</p><h4 id="稳定性-1" tabindex="-1"><a class="header-anchor" href="#稳定性-1" aria-hidden="true">#</a> 稳定性</h4><p>不稳，因为随时可能会随机交换，随便就会把稳定性排破坏。</p>`,11),M={id:"_3-快速排序-链表",tabindex:"-1"},j=n("a",{class:"header-anchor",href:"#_3-快速排序-链表","aria-hidden":"true"},"#",-1),O=p('<ul><li>.<strong>思维模式：</strong></li></ul><p><strong>链表只能够从头开始走。</strong></p><div style="text-align:center;"><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>流程图：</p><div style="text-align:center;"><figure><img src="'+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><h4 id="描述-2" tabindex="-1"><a class="header-anchor" href="#描述-2" aria-hidden="true">#</a> 描述</h4><p>由于链表只能够从一端开始，所以荷兰国旗的方式最好是这样走。</p><h4 id="需要注意的问题-3" tabindex="-1"><a class="header-anchor" href="#需要注意的问题-3" aria-hidden="true">#</a> 需要注意的问题</h4><ul><li><ol><li>是星星移动了，再和三角形指针交换的。所以TEMP永远都在最左边,本质就是荷兰国旗思想，所有小于的放在左边，大于的放在右边。</li></ol></li><li><ol start="2"><li>是要递归的</li></ol></li><li><p>.<strong>代码：</strong></p></li></ul><p>必须把尾巴也传进去，因为是换数字，所以本质和数组一样，需要有一个位置区分大于区，小于区，和等于区。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>list <span class="token function">Quick</span><span class="token punctuation">(</span>list begin<span class="token punctuation">,</span>list end<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>begin<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>begin<span class="token operator">==</span>end<span class="token operator">||</span>end<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> begin<span class="token punctuation">;</span> <span class="token comment">//不应该出现在这里的情况全部递归回去。 </span>
	<span class="token comment">//获取排序的数值 </span>
	<span class="token keyword">int</span> temp <span class="token operator">=</span> begin<span class="token operator">-&gt;</span>x<span class="token punctuation">;</span>
	
	list F <span class="token operator">=</span> begin<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
	list less <span class="token operator">=</span> begin<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>F <span class="token operator">!=</span> end<span class="token operator">-&gt;</span>next <span class="token operator">&amp;&amp;</span> F <span class="token punctuation">)</span>   <span class="token comment">//判断条件也不是空，是不到结尾，根据函数给定的参数 </span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>F<span class="token operator">-&gt;</span>x <span class="token operator">&lt;</span> temp<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			less <span class="token operator">=</span> less<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>less <span class="token operator">!=</span> F<span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token keyword">int</span> temp <span class="token operator">=</span> F<span class="token operator">-&gt;</span>x<span class="token punctuation">;</span>
				F<span class="token operator">-&gt;</span>x <span class="token operator">=</span> less<span class="token operator">-&gt;</span>x<span class="token punctuation">;</span>
				less<span class="token operator">-&gt;</span>x <span class="token operator">=</span> temp<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		F <span class="token operator">=</span> F<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
	 <span class="token punctuation">}</span> 
	
	<span class="token keyword">if</span><span class="token punctuation">(</span>begin<span class="token operator">!=</span>less<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">int</span> temp <span class="token operator">=</span> begin<span class="token operator">-&gt;</span>x<span class="token punctuation">;</span>
		begin<span class="token operator">-&gt;</span>x <span class="token operator">=</span> less<span class="token operator">-&gt;</span>x<span class="token punctuation">;</span>
		less<span class="token operator">-&gt;</span>x <span class="token operator">=</span> temp<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token function">Quick</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span>less<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Quick</span><span class="token punctuation">(</span>less<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> begin<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function U(S,Q){const t=o("font"),l=o("ExternalLinkIcon");return c(),u("div",null,[n("h2",v,[b,s(),a(t,{color:"red"},{default:e(()=>[s("#")]),_:1}),s("1.各种排序的结论")]),h,n("h2",g,[y,s(),a(t,{color:"red"},{default:e(()=>[s("#")]),_:1}),s("2.归并排序")]),x,w,f,_,n("h2",L,[E,s(),a(t,{color:"red"},{default:e(()=>[s("#")]),_:1}),s("2.归并排序-链表")]),N,n("h2",F,[z,s(),a(t,{color:"red"},{default:e(()=>[s("#")]),_:1}),s("3.快速排序")]),n("ul",null,[n("li",null,[A,n("p",null,[n("a",R,[s("快速排序"),a(l)])])])]),B,n("h2",M,[j,s(),a(t,{color:"red"},{default:e(()=>[s("#")]),_:1}),s("3.快速排序-链表")]),O])}const I=i(m,[["render",U],["__file","three.html.vue"]]);export{I as default};
